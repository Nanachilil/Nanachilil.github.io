<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高精度 C++</title>
      <link href="/posts/2194c2b9/"/>
      <url>/posts/2194c2b9/</url>
      
        <content type="html"><![CDATA[<p><img src="/%E9%AB%98%E7%B2%BE%E5%BA%A6-C/1.png" alt="1"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/posts/e8eb0481/"/>
      <url>/posts/e8eb0481/</url>
      
        <content type="html"><![CDATA[<h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个按照升序排列的长度为 n的整数数组，以及 q个查询。</p><p>对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 00 开始计数）。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><span id="more"></span><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含整数 n 和 q，表示数组长度和询问个数。</p><p>第二行包含 n个整数（均在 1∼10000 范围内），表示完整数组。</p><p>接下来 q 行，每行包含一个整数 k，表示一个询问元素。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>共 q 行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤n≤100000<br>1≤q≤10000<br>1≤k≤10000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">1 2 2 3 3 4</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">5 5</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><h3 id="代码描述"><a href="#代码描述" class="headerlink" title="代码描述"></a>代码描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,q,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//第一个a[l]=k，查找最左边的位置</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid]&gt;=k) r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果该值，不是</span></span><br><span class="line">        <span class="keyword">if</span>(a[l]!=k) cout&lt;&lt;<span class="string">&quot;-1 -1&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//查找最后一个k（最右边的位置），</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> mid=<span class="number">1</span>+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(a[mid]&lt;=k) l=mid;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h3><p>用二分去查找元素，要求数组的有序性或者拥有类似于有序的性质。所以写之前，就要考虑好想要查找的是什么。</p><p>就本题而言，一个包含重复元素的有序序列，要求输出某元素出现的起始位置和终止位置。所以，需要写两个二分，一个需要找到 &gt;&#x3D; x 的第一个数，另一个需要找到 &lt;&#x3D; x 的最后一个数。</p><p>二分查找的两套模板（如下图所示）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="comment">//找的是左边界</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质，q[mid]&gt;=x</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="comment">//即找的是右边界</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>; <span class="comment">//+1是为了防止死循环，如[1,1]区间，true时</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid; <span class="comment">//q[mid]&lt;=x</span></span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一套，查找的是左边界；第二套，查找的是右边界。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二分查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设有两个栈s1、s2都采用顺序栈方式，并共享一个存储区[0,  ,maxsize-1],为了尽量利用空间，减少溢出的可能，可采用栈顶相向，迎面增长的存储方式。试设计s1、s2有关入栈和出栈的操作方式 -008</title>
      <link href="/posts/8d6133f4/"/>
      <url>/posts/8d6133f4/</url>
      
        <content type="html"><![CDATA[<h1 id="设有两个栈s1、s2都采用顺序栈方式，并共享一个存储区-0-maxsize-1-为了尽量利用空间，减少溢出的可能，可采用栈顶相向，迎面增长的存储方式。试设计s1、s2有关入栈和出栈的操作方式"><a href="#设有两个栈s1、s2都采用顺序栈方式，并共享一个存储区-0-maxsize-1-为了尽量利用空间，减少溢出的可能，可采用栈顶相向，迎面增长的存储方式。试设计s1、s2有关入栈和出栈的操作方式" class="headerlink" title="设有两个栈s1、s2都采用顺序栈方式，并共享一个存储区[0,  ,maxsize-1],为了尽量利用空间，减少溢出的可能，可采用栈顶相向，迎面增长的存储方式。试设计s1、s2有关入栈和出栈的操作方式"></a>设有两个栈s1、s2都采用顺序栈方式，并共享一个存储区[0,  ,maxsize-1],为了尽量利用空间，减少溢出的可能，可采用栈顶相向，迎面增长的存储方式。试设计s1、s2有关入栈和出栈的操作方式</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h4 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h4><p>​1、共享栈的定义</p><p>​2、共享栈两个指针在入栈、出栈时的操作</p><h4 id="代码注意点"><a href="#代码注意点" class="headerlink" title="代码注意点"></a>代码注意点</h4><p>​1、共享栈的定义：<strong>数组空间</strong>、数组存储的<strong>两个栈顶指针</strong></p><p>​2、exit(0)和return的区别，exit(0)是直接终止进程，return是返回函数调用。</p><p>​3、return 0：<strong>第一个含义</strong>一般用在主函数结束时，按照程序开发的一般惯例，表示成功完成本函数。<strong>第二个含义</strong>表示假，一般用于<a href="https://so.csdn.net/so/search?q=bool%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">bool函数</a>返回值。在C++中也可以直接用int，返回值为0时为假。宏定义ERROR 与FLASE一般为0。</p><p>​ return 1: 与return 0 的第二个含义相对应，<strong>表示真</strong>，正确。宏定义TRUE，OK一般为1。</p><p>​ return -1: 与return 0 的第一个含义相对应，表示返回一个代数值，一般用在<strong>子函数结尾</strong>。按照程序开发的一般惯例，<strong>表示该函数失败</strong>，在数据结构中，一般指**数据溢出(栈只会出现上溢)**，宏定义OVERFLOW 一般为-1。</p><p>​4、switch每一个case后面都要有break</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int <span class="comment">//定义ElemType为int类型</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType stack[maxsize];</span><br><span class="line">    <span class="type">int</span> top[<span class="number">2</span>];         <span class="comment">//top为两个栈顶指针</span></span><br><span class="line">&#125;stk;</span><br><span class="line"></span><br><span class="line">stk s;        <span class="comment">//s为全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈操作</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">push</span><span class="params">(<span class="type">int</span> i,ElemType x)</span></span>&#123;     <span class="comment">//i为栈号，i=0表示左边的s1栈，i=2表示右边的s2栈，x为入栈元素</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入错误&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);        <span class="comment">//exit(0)终止程序</span></span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="keyword">if</span>(s.top[<span class="number">1</span>]-s.top[<span class="number">0</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;已满&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(i)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: s.stack[++s.top[<span class="number">0</span>]]=x; <span class="keyword">return</span> <span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: s.stack[--s.top[<span class="number">1</span>]]=x; <span class="keyword">return</span> <span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">ElemType <span class="title">pop</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;      <span class="comment">//i表示栈号</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈号错误&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(i)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span>(s.top[<span class="number">0</span>]==<span class="number">-1</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;栈空&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.stack[s.top[<span class="number">0</span>]--];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span>(s.top[<span class="number">1</span>]==maxsize)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;栈空&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.stack[s.top[<span class="number">1</span>]--];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;<span class="comment">//switch</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 共享栈 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx -007</title>
      <link href="/posts/521b9f65/"/>
      <url>/posts/521b9f65/</url>
      
        <content type="html"><![CDATA[<h1 id="设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx"><a href="#设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx" class="headerlink" title="设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx"></a>设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h4 id="算法思想："><a href="#算法思想：" class="headerlink" title="算法思想："></a>算法思想：</h4><p>​使用栈来判断链表中的数据是否对称。先让前一半元素依次进栈。在处理链表的后一半元素时，当访问到链表的一个元素后，就从链表中弹出一个元素。按循环后数组下标来判断，是否对称</p><h4 id="代码编写注意点："><a href="#代码编写注意点：" class="headerlink" title="代码编写注意点："></a>代码编写注意点：</h4><p>​1、数组下标从0开始，前一半元素下标是从<strong>0 &lt;&#x3D; i &lt; n&#x2F;2</strong></p><p>​2、判断元素个数为<strong>奇数</strong> <strong>n%2&#x3D;&#x3D;1</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span>* next;</span><br><span class="line">&#125;LNode, * LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参考答案</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dc</span><span class="params">(LinkList L,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> s[n/<span class="number">2</span>];     <span class="comment">//s为字符栈</span></span><br><span class="line">    LNode *p=L-&gt;next;   <span class="comment">//p为工作指针，指向待处理的当前元素</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;    <span class="comment">//链表前一半元素进栈，注意由于是数组，下标从零开始。所以i&lt;n/2</span></span><br><span class="line">        s[i]=p-&gt;data;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    i--;        <span class="comment">//恢复最后的i值</span></span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)       <span class="comment">//元素个数为奇数，移过中心点</span></span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;s[i]==p-&gt;data)&#123;</span><br><span class="line">        i--;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;     <span class="comment">//对称</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">//不对称</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自己写的代码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dc</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span>* a = <span class="keyword">new</span> <span class="type">char</span>[n];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = n - <span class="number">1</span>;     <span class="comment">//i,j 作为数组两端的工作指针</span></span><br><span class="line">    LNode* p = L-&gt;next; <span class="comment">//作为遍历单链表的工作指针</span></span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;   <span class="comment">//字符转移</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        a[k] = p-&gt;data;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j - i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == a[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;错误&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] a;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    L = <span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line">    LNode* a, * b, * c;</span><br><span class="line">    a = <span class="keyword">new</span> LNode;</span><br><span class="line">    b = <span class="keyword">new</span> LNode;</span><br><span class="line">    c = <span class="keyword">new</span> LNode;</span><br><span class="line">    a-&gt;data = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    b-&gt;data = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">    c-&gt;data = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">    L-&gt;next=a;</span><br><span class="line">    a-&gt;next=b;</span><br><span class="line">    b-&gt;next=c;</span><br><span class="line">    c-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dc</span>(L, n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> L;</span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    <span class="keyword">delete</span> b;</span><br><span class="line">    <span class="keyword">delete</span> c;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 判断对称性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带头结点的单链表L，设计一个算法使其元素递增 -006</title>
      <link href="/posts/1f97bd59/"/>
      <url>/posts/1f97bd59/</url>
      
        <content type="html"><![CDATA[<h1 id="带头结点的单链表L，设计一个算法使其元素递增"><a href="#带头结点的单链表L，设计一个算法使其元素递增" class="headerlink" title="带头结点的单链表L，设计一个算法使其元素递增"></a>带头结点的单链表L，设计一个算法使其元素递增</h1><span id="more"></span><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​先构成只含一个数据结点的有序单链表，然后以此扫描单链表中剩下的结点p（直至p&#x3D;&#x3D;NULL为止），在有序表中通过比较查找插入<em>P的前驱结点</em>pre，然后将p插入到pre之后。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next,*pre;   <span class="comment">//p，pre分别作为两个链表的工作指针</span></span><br><span class="line">    LNode *r=p-&gt;next;      <span class="comment">//r为p的后继结点，保证不断链</span></span><br><span class="line">    p-&gt;next=<span class="literal">NULL</span>;         <span class="comment">//构造只含有一个数据结点的有序表</span></span><br><span class="line">    p=r;                <span class="comment">//使得p作为单链表的工作指针</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        r=p-&gt;next;        <span class="comment">//将r后移防止断链</span></span><br><span class="line">        pre=L;          <span class="comment">//每次循环，保证pre指向头结点，方便从头开始比较大小</span></span><br><span class="line">        <span class="keyword">while</span>(pre-&gt;next!=<span class="literal">NULL</span>&amp;&amp;pre-&gt;next-&gt;data&lt;p-&gt;data)&#123;    <span class="comment">//比较大小，直到满足，才在pre后面插入p结点</span></span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next=pre-&gt;next;   <span class="comment">//插入的通用算法</span></span><br><span class="line">        pre-&gt;next=p;</span><br><span class="line">        p=r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
            <tag> 元素递增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带头结点代码，单链表逆置，辅助空间为O(1) -005</title>
      <link href="/posts/b6fb7676/"/>
      <url>/posts/b6fb7676/</url>
      
        <content type="html"><![CDATA[<h1 id="带头结点代码，单链表逆置，辅助空间为O-1"><a href="#带头结点代码，单链表逆置，辅助空间为O-1" class="headerlink" title="带头结点代码，单链表逆置，辅助空间为O(1)"></a>带头结点代码，单链表逆置，辅助空间为O(1)</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将头结点和之后结点断开，头插法插入。断开后，无头结点的链表，需要p，r两个指针（p为工作指针，<strong>r&#x3D;p-&gt;next防止断链</strong>）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">Reverse_l</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    LNode *p,*r;   <span class="comment">//p为工作指针，r作为后继指针防止断链</span></span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        r=p-&gt;next;</span><br><span class="line">        p-&gt;next=L-&gt;next;</span><br><span class="line">        L-&gt;next=p;</span><br><span class="line">        p=r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
            <tag> 逆序 </tag>
            
            <tag> 空间复杂度低 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带头结点的单链表L，删除一个最小结点的高效算法（假设最小结点是唯一的） -004</title>
      <link href="/posts/c9cd15b6/"/>
      <url>/posts/c9cd15b6/</url>
      
        <content type="html"><![CDATA[<h1 id="带头结点的单链表L，删除一个最小结点的高效算法（假设最小结点是唯一的）"><a href="#带头结点的单链表L，删除一个最小结点的高效算法（假设最小结点是唯一的）" class="headerlink" title="带头结点的单链表L，删除一个最小结点的高效算法（假设最小结点是唯一的）"></a>带头结点的单链表L，删除一个最小结点的高效算法（假设最小结点是唯一的）</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​遍历指针，使用两个first，second（使用两个<strong>分别定位</strong>p，pre）</p><p>​最小值删除指针，使用两个p，pre</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Del_min</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next,*pre=L;   <span class="comment">//p指向最小的结点.pre指向最小结点的前驱</span></span><br><span class="line">    LNode *first=p,*second=L;  <span class="comment">//first second 用于遍历单链表</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data&lt;first-&gt;data)&#123;</span><br><span class="line">            first=p;</span><br><span class="line">            second=pre;</span><br><span class="line">        &#125;</span><br><span class="line">        second=first;</span><br><span class="line">        first=first-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pre-&gt;next=p-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 按值删除 </tag>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
            <tag> 最小值 </tag>
            
            <tag> 高效算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值 -003</title>
      <link href="/posts/3e29fe4e/"/>
      <url>/posts/3e29fe4e/</url>
      
        <content type="html"><![CDATA[<h1 id="L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值"><a href="#L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值" class="headerlink" title="L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值"></a>L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用了栈的思想，逆序输出。所以用到了递归，间接使用栈</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_print</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">R_print</span>(L-&gt;next);</span><br><span class="line">    <span class="keyword">if</span>(L!=<span class="literal">NULL</span>) cout&lt;&lt;L-&gt;data&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_Ignore_Head</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">R_print</span>(L-&gt;next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
            <tag> 逆序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带头结点的单链表L，删除所有值为x的结点，并释放空间，假设x唯一 -002</title>
      <link href="/posts/68c06b74/"/>
      <url>/posts/68c06b74/</url>
      
        <content type="html"><![CDATA[<h1 id="带头结点的单链表L，删除所有值为x的结点，并释放空间，假设x唯一"><a href="#带头结点的单链表L，删除所有值为x的结点，并释放空间，假设x唯一" class="headerlink" title="带头结点的单链表L，删除所有值为x的结点，并释放空间，假设x唯一"></a>带头结点的单链表L，删除所有值为x的结点，并释放空间，假设x唯一</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>删除结点时，使用first，second<strong>两个指针</strong>来遍历删除</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">Del_X</span><span class="params">(LinkList &amp;L,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    LNode *first,*second;       <span class="comment">//first，second两个指针一前一后，遍历整个链表，并实现删除时连接</span></span><br><span class="line">    second=L;</span><br><span class="line">    first=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(first!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(first-&gt;data==x)&#123;</span><br><span class="line">            second-&gt;next=first-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> first;</span><br><span class="line">            first=second-&gt;next;   </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            first=first-&gt;next;</span><br><span class="line">            second=second-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 按值删除 </tag>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点 -001</title>
      <link href="/posts/f8ef9f43/"/>
      <url>/posts/f8ef9f43/</url>
      
        <content type="html"><![CDATA[<h1 id="设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点"><a href="#设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点" class="headerlink" title="设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点"></a>设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​由于L为引用，是直接对原链表进行操作，所以不会断链。</p><p>​参数引用是L-&gt;next,自我调用函数执行完后，虽然p所指结点被删除了，但是返回的依然是L-&gt;next。返回后，整个表是连续的。外层函数并不知道，内层调用时，L移动了位置。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Del_X_3</span><span class="params">(LinkList &amp;L,ElemType x)</span></span>&#123;</span><br><span class="line">    LNode *p;    <span class="comment">//p指向待删除结点</span></span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;data==x)&#123;</span><br><span class="line">        p=L;</span><br><span class="line">        L=L-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="built_in">Del_X_3</span>(L,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>          <span class="comment">//若L所指结点值不为x</span></span><br><span class="line">        <span class="built_in">Del_X_3</span>(L-&gt;next,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 不带头结点 </tag>
            
            <tag> 按值删除 </tag>
            
            <tag> 单链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新日志（2）</title>
      <link href="/posts/154f879f/"/>
      <url>/posts/154f879f/</url>
      
        <content type="html"><![CDATA[<h2 id="实现左侧栏滑动的同时，目录黏附顶端"><a href="#实现左侧栏滑动的同时，目录黏附顶端" class="headerlink" title="实现左侧栏滑动的同时，目录黏附顶端"></a>实现左侧栏滑动的同时，目录黏附顶端</h2><p>原来只支持侧边栏整体粘性定位，为了阅读体验，只针对目录开启粘性定位，增加 <code>column-left is-sticky</code> 类，并调整样式。</p><span id="more"></span><figure class="highlight js"><figcaption><span>source/js/main.js >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">if</span> ($toc.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">+        $toc.<span class="title function_">addClass</span>(<span class="string">&#x27;column-left is-sticky&#x27;</span>);</span><br><span class="line">         <span class="keyword">const</span> $mask = $(<span class="string">&#x27;&lt;div&gt;&#x27;</span>);     </span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>include/style/widget.styl >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+#toc</span><br><span class="line">+    max-<span class="attr">height</span>: <span class="title function_">calc</span>(100vh - 22px)</span><br><span class="line">+    overflow-<span class="attr">y</span>: scroll</span><br></pre></td></tr></table></figure><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p>[1] <a href="https://www.alphalxy.com/2019/03/customize-icarus/">https://www.alphalxy.com/2019/03/customize-icarus/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> icarus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> icarus </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新日志（1）</title>
      <link href="/posts/c4442e98/"/>
      <url>/posts/c4442e98/</url>
      
        <content type="html"><![CDATA[<p>本文章以日志形式记录icarus主题的更新内容。</p><span id="more"></span><h1 id="2023-x2F-7-x2F-8"><a href="#2023-x2F-7-x2F-8" class="headerlink" title="2023&#x2F;7&#x2F;8"></a>2023&#x2F;7&#x2F;8</h1><h2 id="尝试实现页面放大功能（完成）"><a href="#尝试实现页面放大功能（完成）" class="headerlink" title="尝试实现页面放大功能（完成）"></a>尝试实现页面放大功能（完成）</h2><h3 id="页面放大"><a href="#页面放大" class="headerlink" title="页面放大"></a>页面放大</h3><h4 id="icarus-x2F-source-x2F-css-x2F-plus-styl-没有就新建一个文件"><a href="#icarus-x2F-source-x2F-css-x2F-plus-styl-没有就新建一个文件" class="headerlink" title="icarus&#x2F;source&#x2F;css&#x2F;plus.styl  # 没有就新建一个文件"></a>icarus&#x2F;source&#x2F;css&#x2F;plus.styl  # 没有就新建一个文件</h4><figure class="highlight css"><figcaption><span>icarus/source/css/plus.styl >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">screen-tablet = <span class="number">769px</span></span><br><span class="line">screen-desktop = <span class="number">1088px</span></span><br><span class="line">screen-widescreen = <span class="number">1280px</span></span><br><span class="line">screen-fullhd = <span class="number">1472px</span></span><br><span class="line">screen-onek = <span class="number">1700px</span></span><br><span class="line">primary-<span class="attribute">color</span> = <span class="selector-id">#fafafa</span></span><br><span class="line">primary-<span class="attribute">color</span>-hover = <span class="selector-id">#71a1e0</span></span><br><span class="line">primary-<span class="attribute">color</span>-active = <span class="selector-id">#4382d6</span></span><br><span class="line">primary-<span class="attribute">color</span>-light = rgba(<span class="number">93</span>, <span class="number">147</span>, <span class="number">219</span>, <span class="number">0.8</span>)</span><br><span class="line">link-<span class="attribute">color</span> = rgb(<span class="number">68</span>,<span class="number">155</span>,<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: screen-onek)</span><br><span class="line">    .container</span><br><span class="line">        <span class="attribute">max-width</span>: <span class="number">1600px</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1600px</span></span><br><span class="line">        .column.is-<span class="number">3</span>-widescreen</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">22%</span></span><br><span class="line">        .column.is-<span class="number">6</span>-widescreen</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">56%</span></span><br><span class="line"></span><br><span class="line">// Background image</span><br><span class="line">body</span><br><span class="line">    <span class="attribute">background-color</span>: transparent</span><br><span class="line"><span class="attribute">body</span>:before</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attribute">position</span>: fixed</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.01</span></span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">1s</span></span><br><span class="line">    <span class="attribute">background</span>: url(<span class="string">&quot;https://api.btstu.cn/sjbz/?lx=dongman&amp;format=images&amp;method=pc&quot;</span>) center <span class="number">0</span> no-repeat</span><br><span class="line">    <span class="attribute">background-size</span>: cover</span><br><span class="line">    @media screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: screen-tablet - <span class="number">1</span>)</span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="string">&quot;https://api.btstu.cn/sjbz/?lx=dongman&amp;format=images&amp;method=mobile&quot;</span>)</span><br><span class="line">body.<span class="attribute">ready</span>:before</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">// Nav bar fixes</span><br><span class="line">.navbar</span><br><span class="line">    <span class="attribute">background-color</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>)</span><br><span class="line">    <span class="attribute">backdrop-filter</span>: blur(<span class="number">10px</span>)</span><br><span class="line">    <span class="attribute">-webkit-backdrop-filter</span>: blur(<span class="number">10px</span>)</span><br><span class="line">.navbar-main</span><br><span class="line">    .navbar-menu</span><br><span class="line">        <span class="attribute">background-color</span>: transparent</span><br><span class="line">    .navbar-item</span><br><span class="line">        &amp;.is-active</span><br><span class="line">            <span class="attribute">color</span>: #<span class="number">3273</span>dc</span><br><span class="line">            <span class="attribute">font-weight</span>: bold</span><br><span class="line">        &amp;:<span class="attribute">hover</span></span><br><span class="line">            <span class="attribute">color</span>: #<span class="number">3273</span>dc</span><br><span class="line">            <span class="attribute">background-color</span>: primary-color</span><br><span class="line">    @media screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: screen-desktop)</span><br><span class="line">        .navbar-menu</span><br><span class="line">            .navbar-start</span><br><span class="line">                <span class="attribute">margin-left</span>: <span class="number">2em</span></span><br><span class="line">    @media screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: screen-tablet - <span class="number">1</span>)</span><br><span class="line">        .navbar-menu</span><br><span class="line">            <span class="attribute">flex-direction</span>: column</span><br><span class="line">            .navbar-start</span><br><span class="line">            .navbar-end</span><br><span class="line">                <span class="attribute">justify-content</span>: center</span><br><span class="line">                <span class="attribute">overflow-x</span>: auto</span><br><span class="line">                .navbar-item</span><br><span class="line">                    <span class="attribute">padding</span>: .<span class="number">5rem</span></span><br><span class="line">            .navbar-end</span><br><span class="line">                <span class="attribute">padding-bottom</span>: .<span class="number">5rem</span></span><br><span class="line"></span><br><span class="line">// Card fixes</span><br><span class="line">.card</span><br><span class="line">    <span class="attribute">overflow</span>: visible</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.5s</span> ease</span><br><span class="line">    <span class="attribute">background-color</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.95</span>)</span><br><span class="line">    &amp;:<span class="attribute">hover</span></span><br><span class="line">        <span class="attribute">background-color</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">1</span>)</span><br><span class="line">    &amp;.card-transparent</span><br><span class="line">        <span class="attribute">background-color</span>: transparent !important</span><br><span class="line">        .level-start,</span><br><span class="line">        .level-end</span><br><span class="line">            <span class="attribute">overflow</span>: hidden</span><br><span class="line">@media screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: screen-tablet)</span><br><span class="line">    .column-main,</span><br><span class="line">    .column-left,</span><br><span class="line">    .column-right,</span><br><span class="line">    .column-right-shadow</span><br><span class="line">        &amp;.is-sticky</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">10px</span></span><br><span class="line"></span><br><span class="line">// Article horizontal scroll bar</span><br><span class="line">.article</span><br><span class="line">    .content</span><br><span class="line">        <span class="attribute">overflow</span>: auto</span><br><span class="line"></span><br><span class="line">// Footer fixes</span><br><span class="line">footer.footer</span><br><span class="line">    <span class="attribute">background-color</span>: transparent</span><br><span class="line"></span><br><span class="line">.footer</span><br><span class="line">    <span class="attribute">backdrop-filter</span>: blur(<span class="number">10px</span>)</span><br><span class="line">    <span class="attribute">-webkit-backdrop-filter</span>: blur(<span class="number">10px</span>)</span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    &amp;:before</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="attribute">position</span>: absolute</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">        <span class="attribute">background-color</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line">.footer-logo</span><br><span class="line">    img</span><br><span class="line">        <span class="attribute">max-height</span>: <span class="number">2rem</span></span><br><span class="line">.footer <span class="attribute">a</span>:<span class="keyword">not</span>(.button)</span><br><span class="line">    <span class="attribute">color</span>: inherit</span><br><span class="line">    &amp;:<span class="attribute">hover</span></span><br><span class="line">        <span class="attribute">text-decoration</span>: underline</span><br><span class="line"></span><br><span class="line">// Section fixes</span><br><span class="line">.section .container .columns</span><br><span class="line">    <span class="attribute">-webkit-justify-content</span>: center</span><br><span class="line">    <span class="attribute">justify-content</span>: center</span><br><span class="line"></span><br><span class="line">// Selection</span><br><span class="line">::selection</span><br><span class="line">    <span class="attribute">color</span>: white</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color-light</span><br><span class="line">::-moz-selection</span><br><span class="line">    <span class="attribute">color</span>: white</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color-light</span><br><span class="line"></span><br><span class="line">// Colors</span><br><span class="line">a</span><br><span class="line">    <span class="attribute">color</span>: link-color</span><br><span class="line"></span><br><span class="line">.button.is-link</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color</span><br><span class="line"></span><br><span class="line">article.article</span><br><span class="line">    .article-meta</span><br><span class="line">        <span class="attribute">overflow-y</span>: hidden</span><br><span class="line">    .title</span><br><span class="line">        <span class="attribute">width</span>: fit-content</span><br><span class="line">    img</span><br><span class="line">        <span class="attribute">max-height</span>: <span class="number">800px</span></span><br><span class="line"></span><br><span class="line">article</span><br><span class="line">    .title a</span><br><span class="line">        <span class="attribute">background-image</span>: linear-gradient(transparent calc(<span class="number">100%</span> - <span class="number">1px</span>), primary-color <span class="number">1px</span>)</span><br><span class="line">        <span class="attribute">background-repeat</span>: no-repeat</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">0</span> <span class="number">100%</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">25s</span> ease-in-out</span><br><span class="line">    .<span class="attribute">title</span>:<span class="attribute">hover</span> a</span><br><span class="line">        // override another !important</span><br><span class="line">        <span class="attribute">color</span>: primary-color !important</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span></span><br><span class="line"></span><br><span class="line">.button.<span class="attribute">is-link</span>:<span class="attribute">hover</span>, .button.is-link.is-hovered</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color-hover</span><br><span class="line"></span><br><span class="line">.button.<span class="attribute">is-link</span>:active, .button.is-link.is-active</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color-active</span><br><span class="line"></span><br><span class="line">.pagination-link.is-current</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color</span><br><span class="line">    <span class="attribute">border-color</span>: primary-color-active</span><br><span class="line"></span><br><span class="line">// Fix fontawsome icon 不等宽</span><br><span class="line">.navbar-main .navbar-menu .navbar-end .navbar-item</span><br><span class="line">    <span class="attribute">min-width</span> <span class="number">35px</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center</span><br><span class="line">    <span class="attribute">-webkit-justify-content</span>: center</span><br><span class="line"></span><br><span class="line">// 版权声明</span><br><span class="line">.article-licensing</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">#busuanzi_container_page_pv</span><br><span class="line">    <span class="attribute">display</span>: none !important</span><br><span class="line"></span><br><span class="line">.card .v .vlist .vcard .vcontent</span><br><span class="line">    <span class="attribute">text-align</span>: inherit</span><br><span class="line"></span><br><span class="line">.searchbox</span><br><span class="line">    .searchbox-pinyin</span><br><span class="line">        <span class="attribute">display</span>: flex</span><br><span class="line">        <span class="attribute">align-items</span>: center</span><br><span class="line">        <span class="attribute">user-select</span>: none</span><br><span class="line">        input</span><br><span class="line">            <span class="attribute">vertical-align</span>: middle</span><br><span class="line">        span</span><br><span class="line">            <span class="attribute">position</span>: relative</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">1px</span></span><br><span class="line"></span><br><span class="line">.button.link-more</span><br><span class="line">    margin-top <span class="number">0.75rem</span></span><br><span class="line"></span><br><span class="line">.post-navigation</span><br><span class="line">    .level-item</span><br><span class="line">        <span class="attribute">flex-shrink</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">.twikoo-new-content</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line">// animals</span><br><span class="line"><span class="selector-class">.symbolic-animals</span> </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3273dc</span></span><br></pre></td></tr></table></figure><h4 id="icarus-x2F-source-x2F-style-styl-在该文件最后添加"><a href="#icarus-x2F-source-x2F-style-styl-在该文件最后添加" class="headerlink" title="icarus&#x2F;source&#x2F;style.styl  #在该文件最后添加"></a>icarus&#x2F;source&#x2F;style.styl  #在该文件最后添加</h4><figure class="highlight css"><figcaption><span>icarus/source/style.styl >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;plus&quot;</span></span><br></pre></td></tr></table></figure><hr><h1 id="2023-x2F-7-x2F-9"><a href="#2023-x2F-7-x2F-9" class="headerlink" title="2023&#x2F;7&#x2F;9"></a>2023&#x2F;7&#x2F;9</h1><h2 id="尝试实现toc的侧边栏显示功能"><a href="#尝试实现toc的侧边栏显示功能" class="headerlink" title="尝试实现toc的侧边栏显示功能"></a>尝试实现toc的侧边栏显示功能</h2><h3 id="toc侧边栏显示功能"><a href="#toc侧边栏显示功能" class="headerlink" title="toc侧边栏显示功能"></a>toc侧边栏显示功能</h3><h4 id="在文章头部加入"><a href="#在文章头部加入" class="headerlink" title="在文章头部加入"></a>在文章头部加入</h4><p><code>toc: true</code></p><h2 id="尝试实现文章页面两栏放大"><a href="#尝试实现文章页面两栏放大" class="headerlink" title="尝试实现文章页面两栏放大"></a>尝试实现文章页面两栏放大</h2><h3 id="文章页面放大两栏"><a href="#文章页面放大两栏" class="headerlink" title="文章页面放大两栏"></a>文章页面放大两栏</h3><p>icarus中可能没有_config.post.yml，<strong>需要自己新建文件夹</strong>。icarus <strong>5.0.0版本</strong>后，配置文件通常放在<strong>主题文件外面</strong>需要注意。</p><h4 id="设置文章页面为双栏目"><a href="#设置文章页面为双栏目" class="headerlink" title="设置文章页面为双栏目"></a>设置文章页面为双栏目</h4><p>在Blog文件下，新建**_config.post.yml**。把需要的widget显示到一边，可以参考官方文档<a href="https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/">Icarus用户指南 - 主题配置 - Icarus (ppoffice.github.io)</a></p><h4 id="修改icarus主题下layout文档（Icarus-x2F-layout-x2F-layout-jsx）"><a href="#修改icarus主题下layout文档（Icarus-x2F-layout-x2F-layout-jsx）" class="headerlink" title="修改icarus主题下layout文档（Icarus&#x2F;layout&#x2F;layout.jsx）"></a>修改icarus主题下layout文档（Icarus&#x2F;layout&#x2F;layout.jsx）</h4><p><strong>注意：</strong></p><ol><li>减号(-)：删除这一行</li><li>加号(+)：添加这一行</li></ol><figure class="highlight js"><figcaption><span>Icarus/layout/layout.jsx >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">             &lt;<span class="title class_">Head</span> site=&#123;site&#125; config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; /&gt;</span><br><span class="line">-            &lt;body class=&#123;`is-$&#123;columnCount&#125;-column`&#125;&gt;</span><br><span class="line">+            &lt;body class=&#123;`is-3-column`&#125;&gt;</span><br><span class="line">                 &lt;Navbar config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>Icarus/layout/layout.jsx >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                                 <span class="string">&#x27;is-12&#x27;</span>: columnCount === <span class="number">1</span>,</span><br><span class="line">-                                <span class="string">&#x27;is-8-tablet is-8-desktop is-8-widescreen&#x27;</span>: columnCount === <span class="number">2</span>,</span><br><span class="line">+                                <span class="string">&#x27;is-8-tablet is-8-desktop is-9-widescreen&#x27;</span>: columnCount === <span class="number">2</span>,</span><br><span class="line">                                 <span class="string">&#x27;is-8-tablet is-8-desktop is-6-widescreen&#x27;</span>: columnCount === <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="修改widgets-jsx-layout-x2F-common-x2F-widgets-jsx"><a href="#修改widgets-jsx-layout-x2F-common-x2F-widgets-jsx" class="headerlink" title="修改widgets.jsx (layout&#x2F;common&#x2F;widgets.jsx)"></a>修改widgets.jsx (layout&#x2F;common&#x2F;widgets.jsx)</h4><figure class="highlight js"><figcaption><span>layout/common/widgets.jsx >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">getColumnSizeClass</span>(<span class="params">columnCount</span>) &#123;</span><br><span class="line">     <span class="keyword">switch</span> (columnCount) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">-            <span class="keyword">return</span> <span class="string">&#x27;is-4-tablet is-4-desktop is-4-widescreen&#x27;</span>;</span><br><span class="line">+            <span class="keyword">return</span> <span class="string">&#x27;is-4-tablet is-4-desktop is-3-widescreen&#x27;</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&#x27;is-4-tablet is-4-desktop is-3-widescreen&#x27;</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h4 id="优化不同屏幕下的宽度-include-x2F-style-x2F-responsive-styl"><a href="#优化不同屏幕下的宽度-include-x2F-style-x2F-responsive-styl" class="headerlink" title="优化不同屏幕下的宽度(include&#x2F;style&#x2F;responsive.styl)"></a>优化不同屏幕下的宽度(include&#x2F;style&#x2F;responsive.styl)</h4><figure class="highlight css"><figcaption><span>include/style/responsive.styl >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> +widescreen()</span><br><span class="line">+    <span class="selector-class">.is-3-column</span> <span class="selector-class">.container</span></span><br><span class="line">+        <span class="attribute">max-width</span>: $widescreen - $gap</span><br><span class="line">+        width: $widescreen - $gap</span><br><span class="line">+</span><br><span class="line">     .is-<span class="number">1</span>-column .container, .is-<span class="number">2</span>-column .container</span><br><span class="line">         max-width: $desktop - <span class="number">2</span> * $gap</span><br><span class="line">         width: $desktop - <span class="number">2</span> * $gap</span><br><span class="line"></span><br><span class="line"> +<span class="built_in">fullhd</span>()</span><br><span class="line">+    .is-<span class="number">3</span>-column .container</span><br><span class="line">+        max-width: $fullhd - <span class="number">2</span> * $gap</span><br><span class="line">+        width: $fullhd - <span class="number">2</span> * $gap</span><br><span class="line">+</span><br><span class="line">     .is-<span class="number">2</span>-column .container</span><br><span class="line">         max-width: $widescreen - <span class="number">2</span> * $gap</span><br><span class="line">         width: $widescreen - <span class="number">2</span> * $gap</span><br></pre></td></tr></table></figure><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p>[1] <a href="https://www.alphalxy.com/2019/03/customize-icarus/">https://www.alphalxy.com/2019/03/customize-icarus/</a></p><p>[2] <a href="https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/">Icarus用户指南 - 主题配置 - Icarus (ppoffice.github.io)</a></p><p>&#x2F;&#x2F;此后的博客主题完善过程，将以日期分为多个文章记录</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> icarus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> icarus </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多元函数可微、可导、连续、一阶偏导数连续关系</title>
      <link href="/posts/8df30b8f/"/>
      <url>/posts/8df30b8f/</url>
      
        <content type="html"><![CDATA[<p>​多元函数与一元函数的性质存在许多差异，笔者也存在许多困惑。因此，记录下自己的学习过程和所思所想。</p><span id="more"></span><h2 id="一阶偏导连续与可导的关系"><a href="#一阶偏导连续与可导的关系" class="headerlink" title="一阶偏导连续与可导的关系"></a>一阶偏导连续与可导的关系</h2>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
          <category> advanced mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> advanced mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107/"/>
      <url>/posts/16107/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p> <span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
