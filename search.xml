<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>conda 配置问题汇总</title>
      <link href="/posts/eabd0964/"/>
      <url>/posts/eabd0964/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>macbook air到了，记录一下配置conda环境中遇到的问题。</p><span id="more"></span><h1 id="1-zsh-command-not-found-conda"><a href="#1-zsh-command-not-found-conda" class="headerlink" title="1 zsh: command not found: conda"></a>1 zsh: command not found: conda</h1><h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><p><a href="https://blog.csdn.net/qq_42712462/article/details/111898000?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171407292416800225539590%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=171407292416800225539590&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-111898000-null-null.142%5Ev100%5Epc_search_result_base3&amp;utm_term=zsh:%20command%20not%20found:%20conda&amp;spm=1018.2226.3001.4187">MacOS  zsh: command not found: conda 解决方案_mac zsh:1: command not found: conda-CSDN博客</a></p><p>在 .zshrc 默认文件中添加 conda 的默认路径</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH="/opt/anaconda3/bin:$PATH"</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .zshrc</span><br></pre></td></tr></tbody></table></figure><p>然后重启终端即可</p><h1 id="2-CondaError-Run-‘conda-init’-before-‘conda-activate’"><a href="#2-CondaError-Run-‘conda-init’-before-‘conda-activate’" class="headerlink" title="2 CondaError: Run ‘conda init’ before ‘conda activate’"></a>2 CondaError: Run ‘conda init’ before ‘conda activate’</h1><h2 id="MacOS-1"><a href="#MacOS-1" class="headerlink" title="MacOS"></a>MacOS</h2><p><a href="https://blog.csdn.net/a1996q/article/details/135201168?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171407345416800215044775%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=171407345416800215044775&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-135201168-null-null.142%5Ev100%5Epc_search_result_base3&amp;utm_term=CondaError:%20Run%20conda%20init%20before%20conda%20activate&amp;spm=1018.2226.3001.4187">【Linux】在Linux上使用Conda报错：CondaError: Run ‘conda init‘ before ‘conda activate‘_condaerror: run ‘conda init’ before ‘conda activat-CSDN博客</a></p><p>当在终端中使用一下命令时：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate base</span><br></pre></td></tr></tbody></table></figure><p>出现一下错误：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CondaError: Run 'conda init' before 'conda activate'</span><br></pre></td></tr></tbody></table></figure><p>这是因为conda的启动文件没有运行 </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></tbody></table></figure><p>zsh是mac的默认终端，所以可以把上面命令直接写入 .zshrc 文件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></tbody></table></figure><p>打开终端，则默认启用conda</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
          <category> conda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>井字棋AI_强化</title>
      <link href="/posts/c079033b/"/>
      <url>/posts/c079033b/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>完善了井字棋AI—NanaGo的内部函数，使他更加智能。</p><span id="more"></span><h1 id="AI内核函数"><a href="#AI内核函数" class="headerlink" title="AI内核函数"></a>AI内核函数</h1><p>使用了简单的穷举遍历计算。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__computer_chess</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    电脑下棋NanaGo</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">###########################################################</span></span><br><span class="line">    <span class="comment">#               下一子后, 判断自己是否直接获胜</span></span><br><span class="line">    <span class="comment">###########################################################</span></span><br><span class="line">    <span class="comment"># 横向判断</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        fork_count = <span class="number">0</span></span><br><span class="line">        empty_col = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.FORK:</span><br><span class="line">                fork_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                empty_col = col</span><br><span class="line">        <span class="comment"># 2个叉, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">        <span class="keyword">if</span> fork_count == <span class="number">2</span> <span class="keyword">and</span> empty_col &gt;= <span class="number">0</span>:</span><br><span class="line">            self.__chess_map[row][empty_col] = ChessType.FORK</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"电脑(横向进攻): (<span class="subst">{row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 纵向判断</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        fork_count = <span class="number">0</span></span><br><span class="line">        empty_row = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.FORK:</span><br><span class="line">                fork_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                empty_row = row</span><br><span class="line">        <span class="comment"># 2个叉, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">        <span class="keyword">if</span> fork_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span>:</span><br><span class="line">            self.__chess_map[empty_row][col] = ChessType.FORK</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"电脑(纵向进攻): (<span class="subst">{empty_row}</span>, <span class="subst">{col}</span>) &lt;- 叉"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对角线判断(左上-右下)</span></span><br><span class="line">    fork_count = <span class="number">0</span></span><br><span class="line">    empty_row, empty_col = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.FORK:</span><br><span class="line">        fork_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.FORK:</span><br><span class="line">        fork_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.FORK:</span><br><span class="line">        fork_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">2</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2个叉, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">    <span class="keyword">if</span> fork_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span>:</span><br><span class="line">        self.__chess_map[empty_row][empty_col] = ChessType.FORK</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"电脑(对角线\\进攻): (<span class="subst">{empty_row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对角线判断(左下 - 右上)</span></span><br><span class="line">    fork_count = <span class="number">0</span></span><br><span class="line">    empty_row, empty_col = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.FORK:</span><br><span class="line">        fork_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">2</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.FORK:</span><br><span class="line">        fork_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.FORK:</span><br><span class="line">        fork_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">0</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2个叉, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">    <span class="keyword">if</span> fork_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span>:</span><br><span class="line">        self.__chess_map[empty_row][empty_col] = ChessType.FORK</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"电脑(对角线/进攻): (<span class="subst">{empty_row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">###########################################################</span></span><br><span class="line">    <span class="comment">#     如果对方下一子后, 能直接获胜, 则需要在对应位置堵住对方</span></span><br><span class="line">    <span class="comment">###########################################################</span></span><br><span class="line">    <span class="comment"># 横向判断</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        circle_count = <span class="number">0</span></span><br><span class="line">        empty_col = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.CIRCLE:</span><br><span class="line">                circle_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                empty_col = col</span><br><span class="line">        <span class="comment"># 2个圈, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">        <span class="keyword">if</span> circle_count == <span class="number">2</span> <span class="keyword">and</span> empty_col &gt;= <span class="number">0</span>:</span><br><span class="line">            self.__chess_map[row][empty_col] = ChessType.FORK</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"电脑(横向防守): (<span class="subst">{row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 纵向判断</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        circle_count = <span class="number">0</span></span><br><span class="line">        empty_row = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.CIRCLE:</span><br><span class="line">                circle_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                empty_row = row</span><br><span class="line">        <span class="comment"># 2个圈, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">        <span class="keyword">if</span> circle_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span>:</span><br><span class="line">            self.__chess_map[empty_row][col] = ChessType.FORK</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"电脑(纵向防守): (<span class="subst">{empty_row}</span>, <span class="subst">{col}</span>) &lt;- 叉"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对角线判断(左上-右下)</span></span><br><span class="line">    circle_count = <span class="number">0</span></span><br><span class="line">    empty_row, empty_col = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.CIRCLE:</span><br><span class="line">        circle_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.CIRCLE:</span><br><span class="line">        circle_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.CIRCLE:</span><br><span class="line">        circle_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">2</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2个圈, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">    <span class="keyword">if</span> circle_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span> <span class="keyword">and</span> empty_col &gt;= <span class="number">0</span>:</span><br><span class="line">        self.__chess_map[empty_row][empty_col] = ChessType.FORK</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"电脑(对角线\\防守): (<span class="subst">{empty_row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对角线判断(左下 - 右上)</span></span><br><span class="line">    circle_count = <span class="number">0</span></span><br><span class="line">    empty_row, empty_col = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.CIRCLE:</span><br><span class="line">        circle_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">2</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.CIRCLE:</span><br><span class="line">        circle_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.CIRCLE:</span><br><span class="line">        circle_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.EMPTY:</span><br><span class="line">        empty_row, empty_col = <span class="number">0</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2个圈, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">    <span class="keyword">if</span> circle_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span> <span class="keyword">and</span> empty_col &gt;= <span class="number">0</span>:</span><br><span class="line">        self.__chess_map[empty_row][empty_col] = ChessType.FORK</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"电脑(对角线/防守): (<span class="subst">{empty_row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">###########################################################</span></span><br><span class="line">    <span class="comment">#                       优先占角</span></span><br><span class="line">    <span class="comment">###########################################################</span></span><br><span class="line">    angles = [(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line">    random.shuffle(angles)</span><br><span class="line">    <span class="keyword">for</span> angle <span class="keyword">in</span> angles:</span><br><span class="line">        row, col = angle[<span class="number">0</span>], angle[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">            self.__chess_map[row][col] = ChessType.FORK</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"电脑(优先占角): (<span class="subst">{row}</span>, <span class="subst">{col}</span>) &lt;- 叉"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">###########################################################</span></span><br><span class="line">    <span class="comment">#                       次要占中心</span></span><br><span class="line">    <span class="comment">###########################################################</span></span><br><span class="line">    <span class="keyword">if</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.EMPTY:</span><br><span class="line">        self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] = ChessType.FORK</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"电脑(占中心): (1, 1) &lt;- 叉"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">###########################################################</span></span><br><span class="line">    <span class="comment">#              其他情况, 在剩余空白处随机下一个叉</span></span><br><span class="line">    <span class="comment">###########################################################</span></span><br><span class="line">    empty_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                empty_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> empty_count &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    new_fork_chess_pos = random.randrange(empty_count)</span><br><span class="line">    empty_pos = <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"new_fork_chess_pos"</span>, new_fork_chess_pos)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"empty_count"</span>, empty_count)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        is_pass = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                <span class="keyword">if</span> empty_pos != new_fork_chess_pos:</span><br><span class="line">                    empty_pos += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                self.__chess_map[row][col] = ChessType.FORK</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f"电脑(随机落子): (<span class="subst">{row}</span>, <span class="subst">{col}</span>) &lt;- 叉"</span>)</span><br><span class="line">                is_pass = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> is_pass:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></tbody></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> enum</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line">BG_COLOR = pygame.Color(<span class="string">"#EEEEEE"</span>) <span class="comment">#背景</span></span><br><span class="line">BOARD_COLAR = pygame.Color(<span class="string">"#E96666"</span>) <span class="comment"># 边框</span></span><br><span class="line">CIRCLE_CHESS_COLOR = pygame.Color(<span class="string">"#3CA273"</span>) <span class="comment"># 画圈圈的棋子的颜色</span></span><br><span class="line">FORK_CHESS_COLOR = pygame.Color(<span class="string">"#5570C2"</span>) <span class="comment"># 画叉的棋子的颜色</span></span><br><span class="line">WIN_LINE_COLOR = pygame.Color(<span class="string">"#FFA801"</span>) <span class="comment"># 获胜划线</span></span><br><span class="line">CIRCLE_WIN_HINT_TEXT_COLOR = pygame.Color(<span class="string">"#029999"</span>) <span class="comment"># 画圈获胜文本</span></span><br><span class="line">FORK_WIN_HINT_TEXT_COLOR = pygame.Color(<span class="string">"#E94466"</span>) <span class="comment"># 画叉获胜文本</span></span><br><span class="line">TIE_HINT_TEXT_COLOR = pygame.Color(<span class="string">"#FAC888"</span>) <span class="comment"># 平局文本</span></span><br><span class="line">RESTART_HINT_TEXT_COLOR = pygame.Color(<span class="string">"#91CBBB"</span>) <span class="comment">#重新开始</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 初试化</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    pygame.display.set_caption(<span class="string">"井字棋AI_NanaGo"</span>)</span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">500</span>,<span class="number">500</span>))</span><br><span class="line">    clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line">    scene = GameScene()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="comment"># 退出判断</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 处理鼠标的输入，传递到我的场景中进行处理</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">                <span class="keyword">if</span> event.<span class="built_in">dict</span>[<span class="string">"button"</span>] == pygame.BUTTON_LEFT:</span><br><span class="line">                    pos = event.<span class="built_in">dict</span>[<span class="string">"pos"</span>] <span class="comment">#pos is a tuple</span></span><br><span class="line">                    scene.on_mouse_left_button_down(pos[<span class="number">0</span>], pos[<span class="number">1</span>])</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEMOTION:</span><br><span class="line">                <span class="comment">#鼠标移动</span></span><br><span class="line">                pos = event.<span class="built_in">dict</span>[<span class="string">"pos"</span>] <span class="comment">#pos is a tuple</span></span><br><span class="line">                scene.on_mouse_motion(pos[<span class="number">0</span>], pos[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#绘制场景</span></span><br><span class="line">        scene.draw(screen)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#更新屏幕</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#限制帧率</span></span><br><span class="line">        clock.tick(<span class="number">30</span>)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChessType</span>(enum.Enum):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    棋子类型，画圈圈的是人类，画叉的是电脑AI</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    EMPTY = <span class="number">0</span></span><br><span class="line">    <span class="string">"""空位，没有被下子"""</span></span><br><span class="line"></span><br><span class="line">    CIRCLE = <span class="number">1</span></span><br><span class="line">    FORK = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameStatus</span>(enum.Enum):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    游戏状态</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    PLAYING = <span class="number">0</span></span><br><span class="line">    CIRCLE_WIN = <span class="number">1</span></span><br><span class="line">    FORK_WIN = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    TIE = <span class="number">3</span></span><br><span class="line">    <span class="string">"""平局"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameScene</span>:</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    游戏场景</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    __game_status: GameStatus = <span class="literal">None</span></span><br><span class="line">    __chess_map: <span class="type">List</span>[<span class="type">List</span>[ChessType]] = <span class="literal">None</span></span><br><span class="line">    __curr_mouse_down_pos: <span class="type">Optional</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]] = <span class="literal">None</span></span><br><span class="line">    __curr_mouse_motion_pos: <span class="type">Optional</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]] = <span class="literal">None</span></span><br><span class="line">    __win_pos_start: <span class="type">Optional</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]] = <span class="literal">None</span></span><br><span class="line">    __win_pos_end: <span class="type">Optional</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]] = <span class="literal">None</span></span><br><span class="line">    __circle_win_hint_text: pygame.Surface = <span class="literal">None</span></span><br><span class="line">    __fork_win_hint_text: pygame.Surface = <span class="literal">None</span></span><br><span class="line">    __tie_hint_text: pygame.Surface = <span class="literal">None</span></span><br><span class="line">    __restart_text: pygame.Surface = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        font = pygame.font.Font(pygame.font.get_default_font(), <span class="number">25</span>)</span><br><span class="line">        self.__circle_win_hint_text = font.render(<span class="string">"You Win"</span>, <span class="literal">True</span>, CIRCLE_WIN_HINT_TEXT_COLOR)</span><br><span class="line">        self.__fork_win_hint_text = font.render(<span class="string">"NanaGo Win"</span>, <span class="literal">True</span>, FORK_WIN_HINT_TEXT_COLOR)</span><br><span class="line">        self.__tie_hint_text = font.render(<span class="string">"Tie"</span>, <span class="literal">True</span>, TIE_HINT_TEXT_COLOR)</span><br><span class="line">        self.__restart_text = font.render(<span class="string">"Click for a new game"</span>, <span class="literal">True</span>, RESTART_HINT_TEXT_COLOR)</span><br><span class="line">        self.__init()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"初始化ing"</span>)</span><br><span class="line">        self.__game_status = GameStatus.PLAYING</span><br><span class="line"></span><br><span class="line">        self.__chess_map = [</span><br><span class="line">            [ChessType.EMPTY,ChessType.EMPTY,ChessType.EMPTY],</span><br><span class="line">            [ChessType.EMPTY,ChessType.EMPTY,ChessType.EMPTY],</span><br><span class="line">            [ChessType.EMPTY,ChessType.EMPTY,ChessType.EMPTY]</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        self.__curr_mouse_down_pos = <span class="literal">None</span></span><br><span class="line">        self.__win_pos_start = <span class="literal">None</span></span><br><span class="line">        self.__win_pos_end = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"电脑先手"</span>)</span><br><span class="line">            self.__computer_chess()</span><br><span class="line">            self.__check_game_over()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"人类先手"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__computer_chess</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        电脑下棋</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        v1, 从左上角开始依次遍历，然后下到第一个empty的地方</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># for c in range(3):</span></span><br><span class="line">        <span class="comment">#     for r in range(3):</span></span><br><span class="line">        <span class="comment">#         if self.__chess_map[r][c] == ChessType.EMPTY:</span></span><br><span class="line">        <span class="comment">#             self.__chess_map[r][c] = ChessType.FORK</span></span><br><span class="line">        <span class="comment">#             return</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        v2, 穷举法遍历</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">###########################################################</span></span><br><span class="line">        <span class="comment">#               下一子后, 判断自己是否直接获胜</span></span><br><span class="line">        <span class="comment">###########################################################</span></span><br><span class="line">        <span class="comment"># 横向判断</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            fork_count = <span class="number">0</span></span><br><span class="line">            empty_col = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.FORK:</span><br><span class="line">                    fork_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                    empty_col = col</span><br><span class="line">            <span class="comment"># 2个叉, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">            <span class="keyword">if</span> fork_count == <span class="number">2</span> <span class="keyword">and</span> empty_col &gt;= <span class="number">0</span>:</span><br><span class="line">                self.__chess_map[row][empty_col] = ChessType.FORK</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f"电脑(横向进攻): (<span class="subst">{row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 纵向判断</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            fork_count = <span class="number">0</span></span><br><span class="line">            empty_row = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.FORK:</span><br><span class="line">                    fork_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                    empty_row = row</span><br><span class="line">            <span class="comment"># 2个叉, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">            <span class="keyword">if</span> fork_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span>:</span><br><span class="line">                self.__chess_map[empty_row][col] = ChessType.FORK</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f"电脑(纵向进攻): (<span class="subst">{empty_row}</span>, <span class="subst">{col}</span>) &lt;- 叉"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对角线判断(左上-右下)</span></span><br><span class="line">        fork_count = <span class="number">0</span></span><br><span class="line">        empty_row, empty_col = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.FORK:</span><br><span class="line">            fork_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.FORK:</span><br><span class="line">            fork_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.FORK:</span><br><span class="line">            fork_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">2</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2个叉, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">        <span class="keyword">if</span> fork_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span>:</span><br><span class="line">            self.__chess_map[empty_row][empty_col] = ChessType.FORK</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"电脑(对角线\\进攻): (<span class="subst">{empty_row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对角线判断(左下 - 右上)</span></span><br><span class="line">        fork_count = <span class="number">0</span></span><br><span class="line">        empty_row, empty_col = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.FORK:</span><br><span class="line">            fork_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">2</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.FORK:</span><br><span class="line">            fork_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.FORK:</span><br><span class="line">            fork_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">0</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2个叉, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">        <span class="keyword">if</span> fork_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span>:</span><br><span class="line">            self.__chess_map[empty_row][empty_col] = ChessType.FORK</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"电脑(对角线/进攻): (<span class="subst">{empty_row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">###########################################################</span></span><br><span class="line">        <span class="comment">#     如果对方下一子后, 能直接获胜, 则需要在对应位置堵住对方</span></span><br><span class="line">        <span class="comment">###########################################################</span></span><br><span class="line">        <span class="comment"># 横向判断</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            circle_count = <span class="number">0</span></span><br><span class="line">            empty_col = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.CIRCLE:</span><br><span class="line">                    circle_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                    empty_col = col</span><br><span class="line">            <span class="comment"># 2个圈, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">            <span class="keyword">if</span> circle_count == <span class="number">2</span> <span class="keyword">and</span> empty_col &gt;= <span class="number">0</span>:</span><br><span class="line">                self.__chess_map[row][empty_col] = ChessType.FORK</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f"电脑(横向防守): (<span class="subst">{row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 纵向判断</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            circle_count = <span class="number">0</span></span><br><span class="line">            empty_row = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.CIRCLE:</span><br><span class="line">                    circle_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                    empty_row = row</span><br><span class="line">            <span class="comment"># 2个圈, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">            <span class="keyword">if</span> circle_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span>:</span><br><span class="line">                self.__chess_map[empty_row][col] = ChessType.FORK</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f"电脑(纵向防守): (<span class="subst">{empty_row}</span>, <span class="subst">{col}</span>) &lt;- 叉"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对角线判断(左上-右下)</span></span><br><span class="line">        circle_count = <span class="number">0</span></span><br><span class="line">        empty_row, empty_col = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.CIRCLE:</span><br><span class="line">            circle_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.CIRCLE:</span><br><span class="line">            circle_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.CIRCLE:</span><br><span class="line">            circle_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">2</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2个圈, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">        <span class="keyword">if</span> circle_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span> <span class="keyword">and</span> empty_col &gt;= <span class="number">0</span>:</span><br><span class="line">            self.__chess_map[empty_row][empty_col] = ChessType.FORK</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"电脑(对角线\\防守): (<span class="subst">{empty_row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对角线判断(左下 - 右上)</span></span><br><span class="line">        circle_count = <span class="number">0</span></span><br><span class="line">        empty_row, empty_col = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.CIRCLE:</span><br><span class="line">            circle_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">2</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.CIRCLE:</span><br><span class="line">            circle_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.CIRCLE:</span><br><span class="line">            circle_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.EMPTY:</span><br><span class="line">            empty_row, empty_col = <span class="number">0</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2个圈, 并且有一个空白, 则直接下到空白处</span></span><br><span class="line">        <span class="keyword">if</span> circle_count == <span class="number">2</span> <span class="keyword">and</span> empty_row &gt;= <span class="number">0</span> <span class="keyword">and</span> empty_col &gt;= <span class="number">0</span>:</span><br><span class="line">            self.__chess_map[empty_row][empty_col] = ChessType.FORK</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"电脑(对角线/防守): (<span class="subst">{empty_row}</span>, <span class="subst">{empty_col}</span>) &lt;- 叉"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">###########################################################</span></span><br><span class="line">        <span class="comment">#                       优先占角</span></span><br><span class="line">        <span class="comment">###########################################################</span></span><br><span class="line">        angles = [(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line">        random.shuffle(angles)</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> angles:</span><br><span class="line">            row, col = angle[<span class="number">0</span>], angle[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                self.__chess_map[row][col] = ChessType.FORK</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f"电脑(优先占角): (<span class="subst">{row}</span>, <span class="subst">{col}</span>) &lt;- 叉"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">###########################################################</span></span><br><span class="line">        <span class="comment">#                       次要占中心</span></span><br><span class="line">        <span class="comment">###########################################################</span></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.EMPTY:</span><br><span class="line">            self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] = ChessType.FORK</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"电脑(占中心): (1, 1) &lt;- 叉"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">###########################################################</span></span><br><span class="line">        <span class="comment">#              其他情况, 在剩余空白处随机下一个叉</span></span><br><span class="line">        <span class="comment">###########################################################</span></span><br><span class="line">        empty_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                    empty_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> empty_count &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        new_fork_chess_pos = random.randrange(empty_count)</span><br><span class="line">        empty_pos = <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"new_fork_chess_pos"</span>, new_fork_chess_pos)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"empty_count"</span>, empty_count)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            is_pass = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[row][col] == ChessType.EMPTY:</span><br><span class="line">                    <span class="keyword">if</span> empty_pos != new_fork_chess_pos:</span><br><span class="line">                        empty_pos += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    self.__chess_map[row][col] = ChessType.FORK</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f"电脑(随机落子): (<span class="subst">{row}</span>, <span class="subst">{col}</span>) &lt;- 叉"</span>)</span><br><span class="line">                    is_pass = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> is_pass:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__check_game_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            circle_count = <span class="number">0</span></span><br><span class="line">            fork_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[r][c] == ChessType.CIRCLE:</span><br><span class="line">                    circle_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> self.__chess_map[r][c] == ChessType.FORK:</span><br><span class="line">                    fork_count += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> circle_count == <span class="number">3</span>:</span><br><span class="line">                self.__game_status = GameStatus.CIRCLE_WIN</span><br><span class="line">                self.__win_pos_start = (<span class="number">0</span>, c)</span><br><span class="line">                self.__win_pos_end = (<span class="number">2</span>, c)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"人类获胜"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> fork_count == <span class="number">3</span>:</span><br><span class="line">                self.__game_status = GameStatus.FORK_WIN</span><br><span class="line">                self.__win_pos_start = (<span class="number">0</span>, c)</span><br><span class="line">                self.__win_pos_end = (<span class="number">2</span>, c)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"电脑获胜"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            circle_count = <span class="number">0</span></span><br><span class="line">            fork_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[r][c] == ChessType.CIRCLE:</span><br><span class="line">                    circle_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> self.__chess_map[r][c] == ChessType.FORK:</span><br><span class="line">                    fork_count += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> circle_count == <span class="number">3</span>:</span><br><span class="line">                self.__game_status = GameStatus.CIRCLE_WIN</span><br><span class="line">                self.__win_pos_start = (r, <span class="number">0</span>)</span><br><span class="line">                self.__win_pos_end = (r, <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"人类获胜"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> fork_count == <span class="number">3</span>:</span><br><span class="line">                self.__game_status = GameStatus.FORK_WIN</span><br><span class="line">                self.__win_pos_start = (r, <span class="number">0</span>)</span><br><span class="line">                self.__win_pos_end = (r, <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"电脑获胜"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING:</span><br><span class="line">            <span class="keyword">return</span>     </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.CIRCLE <span class="keyword">and</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.CIRCLE <span class="keyword">and</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.CIRCLE:</span><br><span class="line">            self.__game_status = GameStatus.CIRCLE_WIN</span><br><span class="line">            self.__win_pos_start = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            self.__win_pos_end = (<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.FORK <span class="keyword">and</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.FORK <span class="keyword">and</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.FORK:</span><br><span class="line">            self.__game_status = GameStatus.FORK_WIN</span><br><span class="line">            self.__win_pos_start = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            self.__win_pos_end = (<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.CIRCLE <span class="keyword">and</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.CIRCLE <span class="keyword">and</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.CIRCLE:</span><br><span class="line">            self.__game_status = GameStatus.CIRCLE_WIN</span><br><span class="line">            self.__win_pos_start = (<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">            self.__win_pos_end = (<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.FORK <span class="keyword">and</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.FORK <span class="keyword">and</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.FORK:</span><br><span class="line">            self.__game_status = GameStatus.FORK_WIN</span><br><span class="line">            self.__win_pos_start = (<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">            self.__win_pos_end = (<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        has_empty = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[r][c] == ChessType.EMPTY:</span><br><span class="line">                    has_empty = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> has_empty == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> has_empty:</span><br><span class="line">            self.__game_status == GameStatus.TIE</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get_mouse_on_board_pos</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                                 board_pos: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                                 cell_size: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                                 mouse_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]</span>) -&gt;<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取当前鼠标位置在棋盘中的行列位置(index)(eg(0,0)(0,1)(0,2),...(2,0)(2,1)(2,2))，鼠标没有在棋盘中返回(-1,-1)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> self <span class="comment">#为了防止报错或者warning</span></span><br><span class="line">        board_x, board_y = board_pos[<span class="number">0</span>], board_pos[<span class="number">1</span>]</span><br><span class="line">        mouse_x, mouse_y = mouse_pos[<span class="number">0</span>], mouse_pos[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        x, y = mouse_x - board_x, mouse_y - board_y <span class="comment">#用相对距离</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= cell_size * <span class="number">3</span> <span class="keyword">or</span> y &gt;= cell_size * <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">        <span class="comment"># 竖直方向表示行，水平方向表示列</span></span><br><span class="line">        <span class="keyword">return</span> y // cell_size, x // cell_size</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_mouse_left_button_down</span>(<span class="params">self, pos_x: <span class="built_in">int</span>, pos_y: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        鼠标左键按下</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.__curr_mouse_down_pos = (pos_x, pos_y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_mouse_motion</span>(<span class="params">self, pos_x:<span class="built_in">int</span>, pos_y:<span class="built_in">int</span></span>):</span><br><span class="line">        self.__curr_mouse_motion_pos = (pos_x, pos_y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self, screen: pygame.Surface</span>):</span><br><span class="line">        <span class="comment">#填充背景</span></span><br><span class="line">        screen.fill(BG_COLOR)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#绘制棋盘</span></span><br><span class="line">        board_cell_size = <span class="number">100</span></span><br><span class="line">        board_x = <span class="built_in">round</span>(screen.get_width() / <span class="number">2</span> - (<span class="number">3</span> * board_cell_size) / <span class="number">2</span>)</span><br><span class="line">        board_y = <span class="built_in">round</span>(screen.get_height() / <span class="number">2</span> - (<span class="number">3</span> * board_cell_size) / <span class="number">2</span>)</span><br><span class="line">        self.__draw_board(screen, (board_x,board_y),board_cell_size,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果处于游戏中，判断鼠标（人类）是否有落子</span></span><br><span class="line">        <span class="keyword">if</span> self.__game_status == GameStatus.PLAYING <span class="keyword">and</span> self.__curr_mouse_down_pos:</span><br><span class="line">            row, col = self.__get_mouse_on_board_pos((board_x, board_y), board_cell_size, self.__curr_mouse_down_pos)</span><br><span class="line">            <span class="comment"># 人类落子</span></span><br><span class="line">            self.__chess_map[row][col] = ChessType.CIRCLE</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"人类(点击落子):(<span class="subst">{row}</span>, <span class="subst">{col}</span>) &lt;- 圈"</span>)</span><br><span class="line">            self.__check_game_over()</span><br><span class="line">            <span class="keyword">if</span> self.__game_status == GameStatus.PLAYING:</span><br><span class="line">                self.__computer_chess()</span><br><span class="line">                self.__check_game_over()</span><br><span class="line">            self.__curr_mouse_down_pos = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING <span class="keyword">and</span> self.__curr_mouse_down_pos:</span><br><span class="line">            self.__init()</span><br><span class="line"></span><br><span class="line">        self.__draw_chess(screen, (board_x,board_y),board_cell_size,<span class="number">20</span>,<span class="number">5</span>)</span><br><span class="line">        self.__draw_win_line(screen, (board_x,board_y),board_cell_size,<span class="number">3</span>)</span><br><span class="line">        self.__draw_hint_text(screen, (board_x,board_y),board_cell_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_board</span>(<span class="params">self, screen:pygame.Surface, board_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>], cell_size:<span class="built_in">int</span>, line_width:<span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        绘制棋盘</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> self</span><br><span class="line">        x, y = board_pos[<span class="number">0</span>],  board_pos[<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#横线</span></span><br><span class="line">        x1 = x</span><br><span class="line">        x2 = x + <span class="number">3</span> * cell_size</span><br><span class="line">        y1 = y + cell_size</span><br><span class="line">        y2 = y + <span class="number">2</span> * cell_size</span><br><span class="line">        pygame.draw.line(screen,BOARD_COLAR,(x1,y1),(x2, y1),line_width)</span><br><span class="line">        pygame.draw.line(screen,BOARD_COLAR,(x1,y2),(x2, y2),line_width)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        y1 = y</span><br><span class="line">        y2 = y + <span class="number">3</span> * cell_size</span><br><span class="line">        x1 = x + cell_size</span><br><span class="line">        x2 = x + <span class="number">2</span> * cell_size</span><br><span class="line">        pygame.draw.line(screen,BOARD_COLAR,(x1,y1),(x1, y2),line_width)</span><br><span class="line">        pygame.draw.line(screen,BOARD_COLAR,(x2,y1),(x2, y2),line_width)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_chess</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                        screen:pygame.Surface,</span></span><br><span class="line"><span class="params">                        board_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>,<span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                        board_cell_size:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                        padding:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                        border_width:<span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        绘制棋子</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        board_x, board_y = board_pos[<span class="number">0</span>], board_pos[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.__chess_map)):</span><br><span class="line">            row = self.__chess_map[r]</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row)):</span><br><span class="line">                chess = row[c]</span><br><span class="line">                <span class="keyword">if</span> chess == ChessType.CIRCLE:</span><br><span class="line">                    self.__draw_circle_chess(screen,</span><br><span class="line">                                                (board_x + c * board_cell_size, board_y + r * board_cell_size),</span><br><span class="line">                                                board_cell_size,</span><br><span class="line">                                                padding,</span><br><span class="line">                                                border_width)</span><br><span class="line">                <span class="keyword">elif</span> chess == ChessType.FORK:</span><br><span class="line">                    self.__draw_fork_chess(screen,</span><br><span class="line">                                                (board_x + c * board_cell_size, board_y + r * board_cell_size),</span><br><span class="line">                                                board_cell_size,</span><br><span class="line">                                                padding,</span><br><span class="line">                                                border_width)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_circle_chess</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                            screen:pygame.Surface,</span></span><br><span class="line"><span class="params">                            chess_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>,<span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                            board_cell_size:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                            padding:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                            border_width:<span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        绘制圆棋子</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> self</span><br><span class="line">        chess_x, chess_y = chess_pos[<span class="number">0</span>], chess_pos[<span class="number">1</span>]</span><br><span class="line">        center = <span class="built_in">round</span>(chess_x + board_cell_size / <span class="number">2</span>),  <span class="built_in">round</span>(chess_y + board_cell_size / <span class="number">2</span>)</span><br><span class="line">        radius = <span class="built_in">round</span>(board_cell_size / <span class="number">2</span> - padding)</span><br><span class="line">        pygame.draw.circle(screen, CIRCLE_CHESS_COLOR, center, radius, border_width)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_fork_chess</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                            screen:pygame.Surface,</span></span><br><span class="line"><span class="params">                            chess_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>,<span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                            board_cell_size:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                            padding:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                            border_width:<span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        绘制叉棋子</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> self</span><br><span class="line">        chess_x, chess_y = chess_pos[<span class="number">0</span>], chess_pos[<span class="number">1</span>]</span><br><span class="line">        pygame.draw.line(screen, FORK_CHESS_COLOR, (chess_x + padding, chess_y + padding), (chess_x + board_cell_size - padding, chess_y + board_cell_size - padding ), border_width)</span><br><span class="line">        pygame.draw.line(screen, FORK_CHESS_COLOR, (chess_x + board_cell_size - padding, chess_y + padding), (chess_x + padding, chess_y + board_cell_size - padding ), border_width)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_win_line</span>(<span class="params">self, </span></span><br><span class="line"><span class="params">                        screen:pygame.Surface,</span></span><br><span class="line"><span class="params">                        board_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>,<span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                        cell_size:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                        line_width:<span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        绘制获胜曲线</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> self.__win_pos_start) <span class="keyword">or</span> (<span class="keyword">not</span> self.__win_pos_end):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        board_x, board_y = board_pos[<span class="number">0</span>], board_pos[<span class="number">1</span>]</span><br><span class="line">        pos_start_row, pos_start_col = self.__win_pos_start[<span class="number">0</span>], self.__win_pos_start[<span class="number">1</span>]</span><br><span class="line">        pos_end_row, pos_end_col = self.__win_pos_end[<span class="number">0</span>], self.__win_pos_end[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        half_cell_size = <span class="built_in">round</span>(cell_size / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        start = (board_x + pos_start_col * cell_size + half_cell_size, board_y + pos_start_row * cell_size + half_cell_size)</span><br><span class="line">        end = (board_x + pos_end_col * cell_size + half_cell_size, board_y + pos_end_row * cell_size + half_cell_size)</span><br><span class="line"></span><br><span class="line">        pygame.draw.line(screen, WIN_LINE_COLOR, start, end, line_width)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_hint_text</span>(<span class="params">self, </span></span><br><span class="line"><span class="params">                        screen:pygame.Surface,</span></span><br><span class="line"><span class="params">                        board_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>,<span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                        cell_size:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                        </span>):</span><br><span class="line">        board_y = board_pos[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__game_status == GameStatus.CIRCLE_WIN:</span><br><span class="line">            screen.blit(self.__circle_win_hint_text, (screen.get_width() / <span class="number">2</span> - self.__circle_win_hint_text.get_width() / <span class="number">2</span>, board_y / <span class="number">2</span> - self.__circle_win_hint_text.get_height() / <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">elif</span> self.__game_status == GameStatus.FORK_WIN:</span><br><span class="line">            screen.blit(self.__fork_win_hint_text, (screen.get_width() / <span class="number">2</span> - self.__fork_win_hint_text.get_width() / <span class="number">2</span>, board_y / <span class="number">2</span> - self.__fork_win_hint_text.get_height() / <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">elif</span> self.__game_status == GameStatus.TIE:</span><br><span class="line">            screen.blit(self.__tie_hint_text, (screen.get_width() / <span class="number">2</span> - self.__tie_hint_text.get_width() / <span class="number">2</span>, board_y / <span class="number">2</span> - self.__tie_hint_text.get_height() / <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING:</span><br><span class="line">            <span class="comment">#重新开始的提示</span></span><br><span class="line">            screen.blit(self.__restart_text, (screen.get_width() / <span class="number">2</span> - self.__restart_text.get_width() / <span class="number">2</span>, (screen.get_height() + (board_y + cell_size * <span class="number">3</span>)) / <span class="number">2</span> - self.__restart_text.get_height() / <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"pygame is called"</span>)</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p>总体上来讲，NanaGo还是很强大的。</p><p><img src="/posts/c079033b/image-20240226093234898.png" alt="image-20240226093234898"></p><p><img src="/posts/c079033b/image-20240226093418689.png" alt="image-20240226093418689"></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 小游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 小游戏 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch多分类</title>
      <link href="/posts/5a0879ec/"/>
      <url>/posts/5a0879ec/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>继<a href="https://nanachilil.com/posts/467f8fda/">二分类</a> 后，通过学习 <code>nn.CrossEntropyLoss()</code> 、<code>softmax()</code> 、<code>argmax()</code> ，我尝试实现了下多分类模型基本工作流程。本博文主要用于整理个人的知识框架，希望也能帮到大家。如有不足，欢迎留言。🙏</p><span id="more"></span><p>运行环境：<a href="https://colab.google/">https://colab.google/</a></p><h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><h2 id="准备数据集"><a href="#准备数据集" class="headerlink" title="准备数据集"></a>准备数据集</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X_blob, y_blob = make_blobs(n_samples = <span class="number">1000</span>, n_features = <span class="number">2</span>, centers = <span class="number">4</span>, cluster_std = <span class="number">1.5</span>, random_state = <span class="number">666</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>make_blobs</strong></p><blockquote><p>make_blobs 是 Scikit-learn 中用于生成聚类算法测试数据的函数。它能够生成多类别的高斯分布数据集，用于模拟聚类算法的数据集。</p><p>n_samples：生成的样本总数，即生成的数据点个数；</p><p>n_features：生成的样本的特征数，即维度；</p><p>centers：生成的类别数，或者说簇的个数，即数据点围绕几个中心点分布；</p><p>random_state：随机数种子，用于控制生成的数据集的随机性，相同的随机数种子会生成相同的数据集；</p><p>cluster_std：用于生成聚类数据集时设置聚类的标准差，决定了数据点在每个聚类中的分布紧密程度。标准差越小，数据点越靠近聚类中心，聚类之间的距离越小。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据类型处理</span></span><br><span class="line">X_blob = torch.from_numpy(X_blob).<span class="built_in">type</span>(torch.<span class="built_in">float</span>)</span><br><span class="line">y_blob = torch.from_numpy(y_blob).<span class="built_in">type</span>(torch.LongTensor) <span class="comment"># LongTensor是一个int64数据类型的值</span></span><br></pre></td></tr></tbody></table></figure><h2 id="划分数据集"><a href="#划分数据集" class="headerlink" title="划分数据集"></a>划分数据集</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_blob_train, X_blob_test, y_blob_train, y_blob_test = train_test_split(X_blob, y_blob, test_size = <span class="number">0.2</span>, random_state = <span class="number">888</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">10</span>, <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">plt.scatter(x = X_blob[:,<span class="number">0</span>], y = X_blob[:,<span class="number">1</span>], c = y_blob, cmap = plt.cm.RdYlBu)</span><br><span class="line"></span><br><span class="line">device = <span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span></span><br><span class="line">--&gt;如下图</span><br></pre></td></tr></tbody></table></figure><p><img src="/posts/5a0879ec/picture1.png" alt="picture1"></p><h1 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h1><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlobModel</span>(nn.Module):</span><br><span class="line">  <span class="comment"># hidden_units参数表示隐藏层中神经元的数量，默认值为8。</span></span><br><span class="line">  <span class="comment"># 这个参数决定了神经网络的复杂度和性能。</span></span><br><span class="line">  <span class="comment"># 隐藏层中的神经元数量越多，神经网络就越复杂，可以学习更复杂的模式和特征。</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_features, output_features, hidden_units = <span class="number">8</span></span>):</span><br><span class="line">    <span class="built_in">super</span>().__init__()</span><br><span class="line">    self.linear_layer_stack = nn.Sequential(</span><br><span class="line">        nn.Linear(in_features = input_features, out_features = hidden_units),</span><br><span class="line">        nn.ReLU(),</span><br><span class="line">        nn.Linear(in_features = hidden_units, out_features = output_features),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">    <span class="keyword">return</span> self.linear_layer_stack(x)</span><br></pre></td></tr></tbody></table></figure><p><strong>hidden_units</strong></p><blockquote><p>def _<em>init</em>_(self, input_features, output_features, hidden_units = 8):</p><p>hidden_units相当于一个中介，进行模型内部的变量传递。</p><p>这个参数决定了神经网络的复杂度和性能，隐藏层中的神经元数量越多，神经网络就越复杂，可以学习更复杂的模式和特征。</p></blockquote><p><strong>self.linear_layer_stack = nn.Sequential()</strong></p><blockquote><p>将多个nn.Linear() 和 ReLU() 封装在函数内部。省去return时的嵌套处理</p></blockquote><h2 id="声明模型对象"><a href="#声明模型对象" class="headerlink" title="声明模型对象"></a>声明模型对象</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模型和数据，都要保证设备的一致性</span></span><br><span class="line">model_multiclass = BlobModel(input_features = <span class="number">2</span>, output_features = <span class="number">4</span>).to(device)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">666</span>)</span><br><span class="line">epochs = <span class="number">500</span></span><br><span class="line">X_blob_train, y_blob_train, X_blob_test, y_blob_test = X_blob_train.to(device), y_blob_train.to(device), X_blob_test.to(device), y_blob_test.to(device)</span><br></pre></td></tr></tbody></table></figure><h2 id="损失函数和优化器"><a href="#损失函数和优化器" class="headerlink" title="损失函数和优化器"></a>损失函数和优化器</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss() <span class="comment"># 适用于分类的损失</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#SGD优化器</span></span><br><span class="line">optimizer = torch.optim.SGD(model_multiclass.parameters(), lr = <span class="number">0.1</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>nn.CrossEntropyLoss()</strong></p><blockquote><p><code>nn.CrossEntropyLoss()</code> 是PyTorch中用于计算交叉熵损失的函数。[^1]</p><p>通常用于训练分类模型时，计算预测类别概率与真实类别标签之间的差异。</p><p><code>H(p, q)</code> 值越小，交叉熵也越小，q与p更为接近。</p><p>如下图所示：[^2]</p><p><img src="/posts/5a0879ec/image-20240213161744549.png" alt="image-20240213161744549"></p></blockquote><h1 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line"></span><br><span class="line">  model_multiclass.train()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 1. forward</span></span><br><span class="line">  y_logits = model_multiclass(X_blob_train)</span><br><span class="line">  y_pred = torch.softmax(y_logits, dim = <span class="number">1</span>).argmax(dim = <span class="number">1</span>)  <span class="comment"># softmax、argmax</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 2.</span></span><br><span class="line">  loss = loss_fn(y_logits, y_blob_train)</span><br><span class="line">  acc = accuracy_fn(y_true = y_blob_train, y_pred = y_pred)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 3</span></span><br><span class="line">  optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 4</span></span><br><span class="line">  loss.backward()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 5</span></span><br><span class="line">  optimizer.step()</span><br><span class="line"></span><br><span class="line">  model_multiclass.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">with</span> torch.inference_mode():</span><br><span class="line">    test_logits = model_multiclass(X_blob_test)</span><br><span class="line">    test_pred = torch.softmax(test_logits, dim = <span class="number">1</span>).argmax(dim = <span class="number">1</span>)</span><br><span class="line">    test_loss = loss_fn(test_logits, y_blob_test)</span><br><span class="line">    test_acc = accuracy_fn(y_true = y_blob_test, y_pred = test_pred)</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f"Epoch:<span class="subst">{epoch}</span> | Loss:<span class="subst">{loss:<span class="number">.4</span>f}</span>, ACC:<span class="subst">{acc:<span class="number">.2</span>f}</span>% | Test Loss:<span class="subst">{test_loss:<span class="number">.4</span>f}</span>, Test acc:<span class="subst">{test_acc:<span class="number">.2</span>f}</span>%"</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>softmax</strong></p><blockquote><p><code>Softmax</code> 函数是一种常用的激活函数，通常用于神经网络模型中的多类别分类任务；</p><p>它将一个包含数字的向量转换为概率向量，其中每个值的概率与向量中每个值的相对大小成比例。该函数将返回一个 位于范围(0, 1)内 包含概率值的张量 <code>y_pred_probs</code>，其中每一行的和都为 1。</p><p>在这个例子中，<code>y_logits</code> 是模型的输出，dim = 1 表示在第二个维度上进行 softmax 计算。</p></blockquote><p><strong>softmax 与 sigmoid 的区别</strong></p><blockquote><p>1 输入不同：</p><p>​sigmoid 应用于二分类，输入的是一维数值；而 softmax 应用于多分类，输入的是二维数组</p><p>2 输出不同</p><p>​sigmoid 输出一维数组，且数组元素位于 0 ~ 1 范围内；</p><p>​softmax 输出二维数组，数组元素位于 0 ~ 1 范围内，元素含义表示 每个类别的概率，且每行和为1</p></blockquote><p><strong>argmax</strong></p><blockquote><p>函数用于返回 张量中指定维度上的最大值的索引 (即哪一类）</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--&gt;</span><br><span class="line">Epoch:<span class="number">492</span> | Loss:<span class="number">0.2597</span>, ACC:<span class="number">86.25</span>% | Test Loss:<span class="number">0.2141</span>, Test acc:<span class="number">91.00</span>%</span><br><span class="line">Epoch:<span class="number">493</span> | Loss:<span class="number">0.2592</span>, ACC:<span class="number">87.50</span>% | Test Loss:<span class="number">0.2080</span>, Test acc:<span class="number">92.50</span>%</span><br><span class="line">Epoch:<span class="number">494</span> | Loss:<span class="number">0.2593</span>, ACC:<span class="number">86.12</span>% | Test Loss:<span class="number">0.2136</span>, Test acc:<span class="number">91.50</span>%</span><br><span class="line">Epoch:<span class="number">495</span> | Loss:<span class="number">0.2589</span>, ACC:<span class="number">87.50</span>% | Test Loss:<span class="number">0.2078</span>, Test acc:<span class="number">92.50</span>%</span><br><span class="line">Epoch:<span class="number">496</span> | Loss:<span class="number">0.2589</span>, ACC:<span class="number">86.50</span>% | Test Loss:<span class="number">0.2132</span>, Test acc:<span class="number">91.50</span>%</span><br><span class="line">Epoch:<span class="number">497</span> | Loss:<span class="number">0.2585</span>, ACC:<span class="number">87.38</span>% | Test Loss:<span class="number">0.2077</span>, Test acc:<span class="number">92.50</span>%</span><br><span class="line">Epoch:<span class="number">498</span> | Loss:<span class="number">0.2585</span>, ACC:<span class="number">86.62</span>% | Test Loss:<span class="number">0.2128</span>, Test acc:<span class="number">91.50</span>%</span><br><span class="line">Epoch:<span class="number">499</span> | Loss:<span class="number">0.2582</span>, ACC:<span class="number">87.38</span>% | Test Loss:<span class="number">0.2075</span>, Test acc:<span class="number">92.50</span>%</span><br></pre></td></tr></tbody></table></figure><p><strong>发现 Test acc 达到最高后会下降</strong></p><blockquote><p>学习率太高，步子迈的太大，在最高值附近来回跳</p><p>注意：</p><p>​这里不是过拟合，过拟合是指，模型在训练数据上表现良好，但在测试的数据上表现不佳。过拟合可能会导致模型无法泛化到新的数据集上，因为模型在训练数据集上学习到了噪声而不是信号。</p></blockquote><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p>[^1]: 维基百科 <a href="https://zh.wikipedia.org/wiki/%E4%BA%A4%E5%8F%89%E7%86%B5">交叉熵</a> 相关<br>[^2]: <a href="https://zhuanlan.zhihu.com/p/98785902">https://zhuanlan.zhihu.com/p/98785902</a> 以及 评论区 <a href="https://www.zhihu.com/people/333bdf8209fcc3376c0d0ab4453aed63">杨子江</a> 解答</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> Pytorch,多分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分类任务 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch分类任务</title>
      <link href="/posts/467f8fda/"/>
      <url>/posts/467f8fda/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>学习二分类问题的模型，熟悉逻辑损失函数、pandas.DataFrame()的基础应用。本博文主要用于整理个人的知识框架，希望也能帮到大家。如有不足，欢迎留言。🙏</p><span id="more"></span><h1 id="Pytorch分类任务"><a href="#Pytorch分类任务" class="headerlink" title="Pytorch分类任务"></a>Pytorch分类任务</h1><p>运行环境：<a href="https://colab.google/">https://colab.google/</a></p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a><strong>数据准备</strong></h2><h3 id="准备数据集"><a href="#准备数据集" class="headerlink" title="准备数据集"></a>准备数据集</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_circles</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">make_circles 是 scikit-learn 库中的 sklearn.datasets 模块中的一个函数。</span></span><br><span class="line"><span class="string">它用于生成一个带有圆形决策边界的玩具数据集。这个函数对于测试和可视化处理非线性可分数据的算法非常有用。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">n_samples = <span class="number">1000</span></span><br><span class="line">X, y =make_circles(n_samples, noise = <span class="number">0.03</span>, random_state = <span class="number">666</span>)</span><br><span class="line"><span class="comment"># make_circles生成的数据集通常用于二分类问题,类别标签通常是 0 或 1。生成的数据集中的每个样本都属于两个类别中的一个</span></span><br><span class="line"><span class="comment"># y 的标签是根据每个样本点是否在大圆圈内来确定的，如果在大圆圈内则标签为 1，否则标签为 0。</span></span><br><span class="line"></span><br><span class="line">X.shape, y.shape <span class="comment"># X.shape: 这将返回一个元组，描述了X数组的维度</span></span><br><span class="line"><span class="comment"># （1000，2）二维数组，1000为行数，2为列数</span></span><br><span class="line"><span class="comment"># （1000，） 一位数组，即label</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>(X), <span class="built_in">type</span>(y)</span><br><span class="line">--&gt; (numpy.ndarray, numpy.ndarray)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据类型的转换</span></span><br><span class="line"><span class="comment"># 为什么 要把numpy转为tensoar？</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统一的计算环境</span></span><br><span class="line"><span class="comment"># 动态图 vs 静态图</span></span><br><span class="line"><span class="comment"># 内存管理</span></span><br><span class="line"><span class="comment"># GPU加速</span></span><br><span class="line"><span class="comment"># 自动求导和优化器</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">X = torch.from_numpy(X)</span><br><span class="line">y = torch.from_numpy(y)</span><br><span class="line"></span><br><span class="line">X = X.<span class="built_in">type</span>(torch.<span class="built_in">float</span>)</span><br><span class="line">y = y.<span class="built_in">type</span>(torch.<span class="built_in">float</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在将 NumPy 数组转换为 PyTorch 张量时，如果没有指定数据类型，PyTorch 将会使用与原始数组相同的数据类型。因此，如果原始的 NumPy 数组中的数据类型是 float32 或 float64，那么转换后的 PyTorch 张量的数据类型也会是相应的 torch.float32 或 torch.float64。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们需要明确指定数据类型，以确保数据类型与模型和计算设备（如 GPU）的要求相匹配</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">torch.float 实际上是 torch.float32 的别名。</span></span><br><span class="line"><span class="string">使用 32 位的内存空间来表示浮点数，具有较高的计算性能，通常在深度学习中被广泛使用。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="划分数据集"><a href="#划分数据集" class="headerlink" title="划分数据集"></a>划分数据集</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = <span class="number">0.2</span>, random_state = <span class="number">666</span>)</span><br><span class="line"><span class="comment"># 随机20%划分完成后，X_train 和 y_train 分别包含训练集的特征数据和标签数据，X_test 和 y_test 分别包含测试集的特征数据和标签数据。</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><h4 id="pandas-DataFrame"><a href="#pandas-DataFrame" class="headerlink" title="pandas.DataFrame"></a>pandas.DataFrame</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># 用于引入DataFrame</span></span><br><span class="line">circles = pd.DataFrame({<span class="string">"X1"</span>:X[:,<span class="number">0</span>], <span class="string">"X2"</span>:X[:,<span class="number">1</span>], <span class="string">"label"</span>:y})</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">DataFrame 是 Pandas 中最重要的数据结构之一，它类似于电子表格或数据库表格。</span></span><br><span class="line"><span class="string">DataFrame 是一个二维标记数据结构，可以容纳多种类型的数据，并且每一列都可以有不同的数据类型。</span></span><br><span class="line"><span class="string">DataFrame 允许你以一种类似于 SQL 或 Excel 的方式轻松地对数据进行操作、筛选、分组和汇总。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">X[:,0] 表示取 X 中所有行的第一个特征，即将所有样本的第一个特征存储到 X1 列中。</span></span><br><span class="line"><span class="string">X[:,1] 表示取 X 中所有行的第二个特征，即将所有样本的第二个特征存储到 X2 列中。</span></span><br><span class="line"><span class="string">y 则表示样本的标签，将其存储到 label 列中。</span></span><br><span class="line"><span class="string">最终生成的 DataFrame circles 包含了两个特征列 X1 和 X2，以及一个标签列 label，用来存储每个样本的特征和标签信息。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">circles.head(<span class="number">10</span>)</span><br><span class="line">--&gt;如下表</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>index</th><th>X1</th><th>X2</th><th>label</th></tr></thead><tbody><tr><td>0</td><td>0.5232532787040866</td><td>0.6130051138010815</td><td>1</td></tr><tr><td>1</td><td>0.5590261056027346</td><td>-0.7938079756641505</td><td>0</td></tr><tr><td>2</td><td>0.07279950491964153</td><td>1.0158009611913412</td><td>0</td></tr><tr><td>3</td><td>0.643975455169496</td><td>0.4792458217715751</td><td>1</td></tr><tr><td>4</td><td>0.7277505858717157</td><td>-0.3306116318780561</td><td>1</td></tr><tr><td>5</td><td>0.8114212398289349</td><td>-0.5947803838171337</td><td>0</td></tr><tr><td>6</td><td>-0.9228566785254152</td><td>-0.31323880736337917</td><td>0</td></tr><tr><td>7</td><td>0.8211164440168314</td><td>-0.52126486439117</td><td>0</td></tr><tr><td>8</td><td>-0.862636456661466</td><td>0.052975218510684215</td><td>1</td></tr><tr><td>9</td><td>-0.7868902607268425</td><td>0.10441672781411158</td><td>1</td></tr></tbody></table><h4 id="matplotlib-pyplot"><a href="#matplotlib-pyplot" class="headerlink" title="matplotlib.pyplot"></a>matplotlib.pyplot</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.scatter(x = X[:,<span class="number">0</span>], y = X[:,<span class="number">1</span>], c = y, cmap = plt.cm.RdYlBu)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这段代码使用 Matplotlib 库创建了一个散点图，</span></span><br><span class="line"><span class="string">其中 x 轴表示数据集中的第一个特征（X1），</span></span><br><span class="line"><span class="string">y 轴表示数据集中的第二个特征（X2），并根据标签（y）对点的颜色进行着色。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">plt.scatter() 函数用于创建散点图。</span></span><br><span class="line"><span class="string">x = X[:,0] 指定 x 轴的值为数据集中所有样本的第一个特征。</span></span><br><span class="line"><span class="string">y = X[:,1] 指定 y 轴的值为数据集中所有样本的第二个特征。</span></span><br><span class="line"><span class="string">c = y 指定散点的颜色根据标签 y 的值来确定。注意，此处的y表示label的y，而不是数据集的第二个特征</span></span><br><span class="line"><span class="string">cmap = plt.cm.RdYlBu 指定了使用的颜色映射，这里使用了红黄蓝的颜色映射。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/posts/467f8fda/image-20240212150355179.png" alt="image-20240212150355179"></p><h2 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a><strong>建立模型</strong></h2><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保设备一致性</span></span><br><span class="line">device = <span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleModelV0</span>(nn.Module):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">super</span>().__init__()</span><br><span class="line">    <span class="comment"># nn.Linear 是 PyTorch 中的一个类，用于创建线性（全连接）层。它的作用是将输入的数据进行线性变换</span></span><br><span class="line">    <span class="comment"># 这种映射是复杂的的变换和映射。每个线性层都引入了一组可学习的权重参数，这些参数会在训练过程中进行调整，以使模型能够更好地拟合训练数据并进行预测。而 不是将输入的元素简单的重新按维度组合。</span></span><br><span class="line">    self.layer_1 = nn.Linear(in_features = <span class="number">2</span>, out_features = <span class="number">5</span>) <span class="comment"># 这个线性层将输入的特征空间维度从 2 维映射到了 5 维。</span></span><br><span class="line">    self.layer_2 = nn.Linear(in_features = <span class="number">5</span>, out_features = <span class="number">1</span>)</span><br><span class="line">    self.relu = nn.ReLU() <span class="comment"># 激活函数引入非线性属性，从而增加神经网络的表达能力和学习能力。</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>): <span class="comment"># forward()定义模型的前向传播过程</span></span><br><span class="line">    <span class="keyword">return</span> self.layer_2(self.relu(self.layer_1(x)))</span><br></pre></td></tr></tbody></table></figure><h3 id="声明模型对象"><a href="#声明模型对象" class="headerlink" title="声明模型对象"></a>声明模型对象</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model_0 = CircleModelV0().to(device)</span><br></pre></td></tr></tbody></table></figure><h3 id="分类函数的损失函数如何来定"><a href="#分类函数的损失函数如何来定" class="headerlink" title="分类函数的损失函数如何来定"></a>分类函数的损失函数如何来定</h3><p><strong>思考：如何把预测值映射为 0 还是 1？</strong></p><blockquote><p>使用sigmoid函数，然后将 1 / (1 + e^-x) 与0.5来比，使用torch.round()函数四舍五入。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># logistic函数，即sigmoid函数，把实数压缩到0~1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># torch.nn.BCELoss()  没有经过logistic回归层</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Logistic回归是一种用于解决二分类问题的线性模型，通常用于估计样本属于某一类的概率。</span></span><br><span class="line"><span class="string">Logistic回归可以被视为一个单层的神经网络，其输出通过一个sigmoid函数进行转换，将线性变换的结果压缩到 (0, 1) 区间，表示样本属于某一类的概率。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在PyTorch中，可以使用 nn.Linear 创建一个全连接层，然后通过 nn.Sigmoid 激活函数将线性变换的结果转换为 (0, 1) 区间的概率值。</span></span><br><span class="line"><span class="string">这样的组合通常被称为Logistic回归层，用于二分类问题的预测。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">例如，在PyTorch中，可以如下定义一个简单的Logistic回归层：</span></span><br><span class="line"><span class="string">import torch</span></span><br><span class="line"><span class="string">import torch.nn as nn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class LogisticRegression(nn.Module):</span></span><br><span class="line"><span class="string">    def __init__(self, input_dim):</span></span><br><span class="line"><span class="string">        super(LogisticRegression, self).__init__()</span></span><br><span class="line"><span class="string">        self.linear = nn.Linear(input_dim, 1)</span></span><br><span class="line"><span class="string">        self.sigmoid = nn.Sigmoid()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def forward(self, x):</span></span><br><span class="line"><span class="string">        out = self.linear(x)</span></span><br><span class="line"><span class="string">        out = self.sigmoid(out)</span></span><br><span class="line"><span class="string">        return out</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数定义</span></span><br><span class="line">loss_fn = torch.nn.BCEWithLogitsLoss() <span class="comment"># 经过logistic回归层</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">torch.nn.BCEWithLogitsLoss()这个损失函数结合了 Sigmoid 激活函数和二元交叉熵损失函数，同时计算了两者的结果</span></span><br><span class="line"><span class="string">使用 BCEWithLogitsLoss 可以简化代码，提高计算效率，尤其适用于二分类问题。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import torch</span></span><br><span class="line"><span class="string">import torch.nn as nn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建模型</span></span><br><span class="line"><span class="string">model = YourModel()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 定义损失函数</span></span><br><span class="line"><span class="string">criterion = nn.BCEWithLogitsLoss()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 假设预测结果和真实标签已经准备好</span></span><br><span class="line"><span class="string">outputs = model(inputs)</span></span><br><span class="line"><span class="string">loss = criterion(outputs, targets)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 清零梯度</span></span><br><span class="line"><span class="string">optimizer.zero_grad()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 反向传播</span></span><br><span class="line"><span class="string">loss.backward()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 更新参数</span></span><br><span class="line"><span class="string">optimizer.step()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">optimizer = torch.optim.SGD(params = model_0.parameters(), lr = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="辅助观察函数声明"><a href="#辅助观察函数声明" class="headerlink" title="辅助观察函数声明"></a>辅助观察函数声明</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于计算 预测结果的一致程度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy_fn</span>(<span class="params">y_true, y_pred</span>):</span><br><span class="line">  correct = torch.<span class="built_in">sum</span>(y_true == y_pred).item()</span><br><span class="line"></span><br><span class="line">  acc = correct / <span class="built_in">len</span>(y_true) * <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> acc</span><br></pre></td></tr></tbody></table></figure><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">torch.manual_seed(<span class="number">666</span>)</span><br><span class="line">epochs = <span class="number">185</span></span><br><span class="line">X_train, y_train = X_train.to(device), y_train.to(device)</span><br><span class="line">X_test, y_test = X_test.to(device), y_test.to(device)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">  model_0.train() <span class="comment"># 将模型设置为训练模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># squeeze()移除单维度，方便比较</span></span><br><span class="line"><span class="comment"># 将 (1, n) 或 (n, 1) 的张量，变为 (n,) 的一维张量。有些函数可能要求输入张量的形状必须是一维的</span></span><br><span class="line"><span class="comment"># 使用 squeeze() 可以使得代码更加简洁和清晰，避免了一些不必要的单维度，提高了代码的可读性和可维护性。</span></span><br><span class="line">  y_logits = model_0(X_train).squeeze() </span><br><span class="line">  y_pred = torch.<span class="built_in">round</span>(torch.sigmoid(y_logits)) <span class="comment"># torch.sigmoid() 将y_logits变为 0 ~ 1 ，torch.round() 进行四舍五入</span></span><br><span class="line">  loss = loss_fn(y_logits, y_train) <span class="comment"># 用去除维度后的y_logits与y_train计算损失函数</span></span><br><span class="line">  acc = accuracy_fn(y_train, y_pred)</span><br><span class="line"></span><br><span class="line">  optimizer.zero_grad()</span><br><span class="line">  loss.backward()</span><br><span class="line">  optimizer.step()</span><br><span class="line"></span><br><span class="line">  model_0.<span class="built_in">eval</span>()</span><br><span class="line">  <span class="comment"># model_0.eval()和torch.inference_mode()的区别：</span></span><br><span class="line">  <span class="comment"># 都用于将模型设置为评估模式（inference mode），但它们有一些区别。</span></span><br><span class="line">  <span class="comment"># 总的来说，model_0.eval() 更适合在模型级别进行模式切换，而 torch.inference_mode() 更适合在全局级别临时切换模式。</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">with</span> torch.inference_mode():</span><br><span class="line">    test_logits = model_0(X_test).squeeze()</span><br><span class="line">    test_pred = torch.<span class="built_in">round</span>(torch.sigmoid(test_logits))</span><br><span class="line"></span><br><span class="line">    test_loss = loss_fn(test_logits, y_test)</span><br><span class="line">    test_acc = accuracy_fn(y_test, test_pred)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f"<span class="subst">{epoch}</span> | Loss:<span class="subst">{loss}</span> | acc:<span class="subst">{acc}</span> | Test Loss:<span class="subst">{test_loss}</span> | Test Acc:<span class="subst">{test_acc}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">--&gt;</span><br><span class="line">...</span><br><span class="line"><span class="number">168</span> | Loss:<span class="number">0.5972417593002319</span> | acc:<span class="number">72.125</span> | Test Loss:<span class="number">0.601545512676239</span> | Test Acc:<span class="number">71.5</span></span><br><span class="line"><span class="number">169</span> | Loss:<span class="number">0.595664918422699</span> | acc:<span class="number">72.5</span> | Test Loss:<span class="number">0.6001173257827759</span> | Test Acc:<span class="number">73.0</span></span><br><span class="line"><span class="number">170</span> | Loss:<span class="number">0.5940487384796143</span> | acc:<span class="number">73.0</span> | Test Loss:<span class="number">0.5980546474456787</span> | Test Acc:<span class="number">72.5</span></span><br><span class="line"><span class="number">171</span> | Loss:<span class="number">0.5923799276351929</span> | acc:<span class="number">73.5</span> | Test Loss:<span class="number">0.5966604948043823</span> | Test Acc:<span class="number">73.0</span></span><br><span class="line"><span class="number">172</span> | Loss:<span class="number">0.5906763076782227</span> | acc:<span class="number">74.0</span> | Test Loss:<span class="number">0.5944149494171143</span> | Test Acc:<span class="number">74.0</span></span><br><span class="line"><span class="number">173</span> | Loss:<span class="number">0.5889647006988525</span> | acc:<span class="number">74.375</span> | Test Loss:<span class="number">0.593086302280426</span> | Test Acc:<span class="number">75.0</span></span><br><span class="line"><span class="number">174</span> | Loss:<span class="number">0.5872295498847961</span> | acc:<span class="number">74.375</span> | Test Loss:<span class="number">0.5907705426216125</span> | Test Acc:<span class="number">74.0</span></span><br><span class="line"><span class="number">175</span> | Loss:<span class="number">0.5854421854019165</span> | acc:<span class="number">74.625</span> | Test Loss:<span class="number">0.5894856452941895</span> | Test Acc:<span class="number">76.0</span></span><br><span class="line"><span class="number">176</span> | Loss:<span class="number">0.5837037563323975</span> | acc:<span class="number">75.875</span> | Test Loss:<span class="number">0.5870495438575745</span> | Test Acc:<span class="number">75.5</span></span><br><span class="line"><span class="number">177</span> | Loss:<span class="number">0.5819454789161682</span> | acc:<span class="number">75.25</span> | Test Loss:<span class="number">0.5859463214874268</span> | Test Acc:<span class="number">76.5</span></span><br><span class="line"><span class="number">178</span> | Loss:<span class="number">0.580162763595581</span> | acc:<span class="number">76.25</span> | Test Loss:<span class="number">0.5832081437110901</span> | Test Acc:<span class="number">76.0</span></span><br><span class="line"><span class="number">179</span> | Loss:<span class="number">0.5783393979072571</span> | acc:<span class="number">76.375</span> | Test Loss:<span class="number">0.5823167562484741</span> | Test Acc:<span class="number">77.5</span></span><br><span class="line"><span class="number">180</span> | Loss:<span class="number">0.5764892101287842</span> | acc:<span class="number">77.625</span> | Test Loss:<span class="number">0.5792547464370728</span> | Test Acc:<span class="number">77.0</span></span><br><span class="line"><span class="number">181</span> | Loss:<span class="number">0.5746139883995056</span> | acc:<span class="number">76.75</span> | Test Loss:<span class="number">0.5787341594696045</span> | Test Acc:<span class="number">77.5</span></span><br><span class="line"><span class="number">182</span> | Loss:<span class="number">0.5727413296699524</span> | acc:<span class="number">78.5</span> | Test Loss:<span class="number">0.5753249526023865</span> | Test Acc:<span class="number">77.0</span></span><br><span class="line"><span class="number">183</span> | Loss:<span class="number">0.5708712339401245</span> | acc:<span class="number">77.25</span> | Test Loss:<span class="number">0.5753326416015625</span> | Test Acc:<span class="number">80.5</span></span><br><span class="line"><span class="number">184</span> | Loss:<span class="number">0.5689650177955627</span> | acc:<span class="number">81.875</span> | Test Loss:<span class="number">0.5713624954223633</span> | Test Acc:<span class="number">80.0</span></span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分类任务 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/posts/e8eb0481/"/>
      <url>/posts/e8eb0481/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个按照升序排列的长度为 n的整数数组，以及 q个查询。</p><p>对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 00 开始计数）。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><span id="more"></span><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含整数 n 和 q，表示数组长度和询问个数。</p><p>第二行包含 n个整数（均在 1∼10000 范围内），表示完整数组。</p><p>接下来 q 行，每行包含一个整数 k，表示一个询问元素。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>共 q 行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤n≤100000<br>1≤q≤10000<br>1≤k≤10000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">1 2 2 3 3 4</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></tbody></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">5 5</span><br><span class="line">-1 -1</span><br></pre></td></tr></tbody></table></figure><h3 id="代码描述"><a href="#代码描述" class="headerlink" title="代码描述"></a>代码描述</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> n,q,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//第一个a[l]=k，查找最左边的位置</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid]&gt;=k) r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//如果该值，不是</span></span><br><span class="line">        <span class="keyword">if</span>(a[l]!=k) cout&lt;&lt;<span class="string">"-1 -1"</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//查找最后一个k（最右边的位置），</span></span><br><span class="line">        {</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">            {</span><br><span class="line">                <span class="type">int</span> mid=<span class="number">1</span>+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(a[mid]&lt;=k) l=mid;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            }</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h3><p>用二分去查找元素，要求数组的有序性或者拥有类似于有序的性质。所以写之前，就要考虑好想要查找的是什么。</p><p>就本题而言，一个包含重复元素的有序序列，要求输出某元素出现的起始位置和终止位置。所以，需要写两个二分，一个需要找到 &gt;= x 的第一个数，另一个需要找到 &lt;= x 的最后一个数。</p><p>二分查找的两套模板（如下图所示）：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>{<span class="comment">/* ... */</span>} <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="comment">//找的是左边界</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质，q[mid]&gt;=x</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="comment">//即找的是右边界</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>; <span class="comment">//+1是为了防止死循环，如[1,1]区间，true时</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid; <span class="comment">//q[mid]&lt;=x</span></span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第一套，查找的是左边界；第二套，查找的是右边界。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二分查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch工作流</title>
      <link href="/posts/dfb3c4cb/"/>
      <url>/posts/dfb3c4cb/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>初学机器学习，从线性回归入手，了解机器学习的基本工作流程，从而进一步理解深度学习模型训练的本质。本博文主要用于整理个人的知识框架，希望也能帮到大家。如有不足，欢迎留言。🙏</p><span id="more"></span><h1 id="Pytorch工作流"><a href="#Pytorch工作流" class="headerlink" title="Pytorch工作流"></a>Pytorch工作流</h1><p>运行环境：<a href="https://colab.google/">https://colab.google/</a></p><p>将一般Pytorch机器学习的工作流程划分为：<code>数据准备</code>、<code>建立模型</code>、<code>训练模型</code>、<code>预测</code>这四个部分</p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><h3 id="准备数据集"><a href="#准备数据集" class="headerlink" title="准备数据集"></a>准备数据集</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># y = 0.7 * x + 0.3 (一系列散点)</span></span><br><span class="line">weight = <span class="number">0.7</span></span><br><span class="line">bias = <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create data</span></span><br><span class="line">start = <span class="number">0</span></span><br><span class="line">end = <span class="number">1</span></span><br><span class="line">step = <span class="number">0.02</span></span><br><span class="line">X = torch.arange(start,end, step)</span><br><span class="line">y = weight * X +bias</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">X <span class="comment"># --&gt;表示单步运行结果</span></span><br><span class="line">--&gt;tensor([<span class="number">0.0000</span>, <span class="number">0.0200</span>, <span class="number">0.0400</span>, <span class="number">0.0600</span>, <span class="number">0.0800</span>, <span class="number">0.1000</span>, <span class="number">0.1200</span>, <span class="number">0.1400</span>, <span class="number">0.1600</span>,</span><br><span class="line">        <span class="number">0.1800</span>, <span class="number">0.2000</span>, <span class="number">0.2200</span>, <span class="number">0.2400</span>, <span class="number">0.2600</span>, <span class="number">0.2800</span>, <span class="number">0.3000</span>, <span class="number">0.3200</span>, <span class="number">0.3400</span>,</span><br><span class="line">        <span class="number">0.3600</span>, <span class="number">0.3800</span>, <span class="number">0.4000</span>, <span class="number">0.4200</span>, <span class="number">0.4400</span>, <span class="number">0.4600</span>, <span class="number">0.4800</span>, <span class="number">0.5000</span>, <span class="number">0.5200</span>,</span><br><span class="line">        <span class="number">0.5400</span>, <span class="number">0.5600</span>, <span class="number">0.5800</span>, <span class="number">0.6000</span>, <span class="number">0.6200</span>, <span class="number">0.6400</span>, <span class="number">0.6600</span>, <span class="number">0.6800</span>, <span class="number">0.7000</span>,</span><br><span class="line">        <span class="number">0.7200</span>, <span class="number">0.7400</span>, <span class="number">0.7600</span>, <span class="number">0.7800</span>, <span class="number">0.8000</span>, <span class="number">0.8200</span>, <span class="number">0.8400</span>, <span class="number">0.8600</span>, <span class="number">0.8800</span>,</span><br><span class="line">        <span class="number">0.9000</span>, <span class="number">0.9200</span>, <span class="number">0.9400</span>, <span class="number">0.9600</span>, <span class="number">0.9800</span>])</span><br><span class="line">        </span><br><span class="line">y</span><br><span class="line">--&gt;tensor([<span class="number">0.3000</span>, <span class="number">0.3140</span>, <span class="number">0.3280</span>, <span class="number">0.3420</span>, <span class="number">0.3560</span>, <span class="number">0.3700</span>, <span class="number">0.3840</span>, <span class="number">0.3980</span>, <span class="number">0.4120</span>,</span><br><span class="line">        <span class="number">0.4260</span>, <span class="number">0.4400</span>, <span class="number">0.4540</span>, <span class="number">0.4680</span>, <span class="number">0.4820</span>, <span class="number">0.4960</span>, <span class="number">0.5100</span>, <span class="number">0.5240</span>, <span class="number">0.5380</span>,</span><br><span class="line">        <span class="number">0.5520</span>, <span class="number">0.5660</span>, <span class="number">0.5800</span>, <span class="number">0.5940</span>, <span class="number">0.6080</span>, <span class="number">0.6220</span>, <span class="number">0.6360</span>, <span class="number">0.6500</span>, <span class="number">0.6640</span>,</span><br><span class="line">        <span class="number">0.6780</span>, <span class="number">0.6920</span>, <span class="number">0.7060</span>, <span class="number">0.7200</span>, <span class="number">0.7340</span>, <span class="number">0.7480</span>, <span class="number">0.7620</span>, <span class="number">0.7760</span>, <span class="number">0.7900</span>,</span><br><span class="line">        <span class="number">0.8040</span>, <span class="number">0.8180</span>, <span class="number">0.8320</span>, <span class="number">0.8460</span>, <span class="number">0.8600</span>, <span class="number">0.8740</span>, <span class="number">0.8880</span>, <span class="number">0.9020</span>, <span class="number">0.9160</span>,</span><br><span class="line">        <span class="number">0.9300</span>, <span class="number">0.9440</span>, <span class="number">0.9580</span>, <span class="number">0.9720</span>, <span class="number">0.9860</span>])</span><br></pre></td></tr></tbody></table></figure><h3 id="划分数据集"><a href="#划分数据集" class="headerlink" title="划分数据集"></a>划分数据集</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train/test split</span></span><br><span class="line">train_split = <span class="built_in">int</span>(<span class="number">0.8</span> * <span class="built_in">len</span>(X)) <span class="comment"># 8:2的划分</span></span><br><span class="line">X_train, y_train = X[:train_split], y[:train_split] <span class="comment">#左闭右开</span></span><br><span class="line">X_test, y_test = X[train_split:], y[train_split:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(X_train), <span class="built_in">len</span>(y_train), <span class="built_in">len</span>(X_test), <span class="built_in">len</span>(y_test)</span><br><span class="line">--&gt;(<span class="number">40</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment">#import as 为引入模块并起别名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_predictions</span>(<span class="params">train_data = X_train, train_labels = y_train, test_data = X_test, test_labels = y_test, predictions = <span class="literal">None</span></span>):</span><br><span class="line">  plt.figure(figsize = (<span class="number">10</span>, <span class="number">7</span>)) <span class="comment"># 图像大小</span></span><br><span class="line">  plt.scatter(train_data, train_labels, c = <span class="string">"b"</span>, s = <span class="number">4</span>, label = <span class="string">"Training data"</span>) <span class="comment"># s = 4, 为指定散点的直径，大约为4个点</span></span><br><span class="line">  plt.scatter(test_data, test_labels, c = <span class="string">"g"</span>, s = <span class="number">4</span>, label = <span class="string">"Test Data"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> predictions <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    plt.scatter(test_data, predictions, c= <span class="string">"r"</span>, s = <span class="number">4</span>, label = <span class="string">"Prediction"</span>)</span><br><span class="line">  plt.legend(prop = {<span class="string">"size"</span>:<span class="number">14</span>}) <span class="comment"># 图例的属性，其中 size 参数指定了图例中文本的大小为 14 磅</span></span><br><span class="line"></span><br><span class="line">plot_predictions()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot_predictions()</span><br><span class="line">--&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src="/posts/dfb3c4cb/plot_predictions().png" alt="download"></p><h2 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearRegressionModel</span>(nn.Module):  <span class="comment">#这个类继承自 nn.Module 类，这是 PyTorch 中定义神经网络模型的基类。</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">super</span>().__init__()</span><br><span class="line">    <span class="comment"># nn.Parameter 是 PyTorch 中的一个类，用于将张量（tensor）封装为可学习的模型参数,</span></span><br><span class="line">    <span class="comment"># 这些参数将被自动地添加到模型的参数列表中，并能够被优化器识别和更新,并使得其具有梯度计算和自动求导的功能。</span></span><br><span class="line">    <span class="comment"># 在神经网络中，模型参数通常表示为权重和偏置，它们需要在训练过程中通过梯度下降等优化算法进行更新。</span></span><br><span class="line">    self.weights = nn.Parameter(torch.randn(<span class="number">1</span>, dtype = torch.<span class="built_in">float</span>), requires_grad = <span class="literal">True</span>)  <span class="comment">#requires_grad = true 表示用于梯度计算,以便在训练过程中更新它们的值。</span></span><br><span class="line">    self.bias = nn.Parameter(torch.randn(<span class="number">1</span>,dtype = torch.<span class="built_in">float</span>), requires_grad = <span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 我们定义了两个参数：权重（weights）和偏置（bias），它们都是可学习的模型参数，用于线性回归模型中的线性部分。</span></span><br><span class="line">    <span class="comment"># 这些参数通过 nn.Parameter 函数封装为模型参数，从而使得它们可以被优化器更新。</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x:torch.tensor</span>):   <span class="comment">#x:torch.tensor标识注释(免责声明)， 不强制，也可以接受其他类型， -&gt;torch.tensor也表示注释，意为最后得到的数据类型</span></span><br><span class="line">    <span class="keyword">return</span> self.weights * x + self.bias</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">torch.manual_seed(<span class="number">666</span>) <span class="comment"># 做个种子，保证伪随机的一致性</span></span><br><span class="line">model_0 = LinearRegressionModel() <span class="comment"># model_0 赋为一个具有相应类属性的对象</span></span><br><span class="line"><span class="comment"># 注意model_0没有在训练模型处声明，所以每次调参训练结果会追加。所以在google colab中每次调参重新训练，应该从这里开始。</span></span><br><span class="line"></span><br><span class="line">model_0.parameters()</span><br><span class="line"><span class="comment"># model_0.parameters() 用于获取神经网络模型 model_0 中的所有模型参数。</span></span><br><span class="line"><span class="comment"># 在 PyTorch 中，模型参数通常是由 nn.Parameter 类型的对象表示的，它们存储了模型的权重和偏置等可学习的参数。</span></span><br><span class="line"><span class="comment"># model_0.parameters() 返回一个迭代器，通过迭代器可以依次访问模型中的每一个参数。这个迭代器通常用于将模型的参数传递给优化器，以便在训练过程中更新参数。</span></span><br><span class="line">--&gt;&lt;generator <span class="built_in">object</span> Module.parameters at <span class="number">0x7a74a42ae7a0</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想print一个东西，但是打印出类似于&lt;generator object Module.parameters at 0x79fc67df00b0&gt;</span></span><br><span class="line"><span class="comment"># 则强制类型转换为list</span></span><br><span class="line"><span class="built_in">list</span>(model_0.parameters())</span><br><span class="line">--&gt;[Parameter containing:</span><br><span class="line"> tensor([-<span class="number">2.1188</span>], requires_grad=<span class="literal">True</span>),</span><br><span class="line"> Parameter containing:</span><br><span class="line"> tensor([<span class="number">0.0635</span>], requires_grad=<span class="literal">True</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model_0.state_dict() <span class="comment"># 另一种得到他的参数的方式 用于返回模型的参数字典（state dictionary）。这个字典包含了模型中所有可学习参数的名称及其对应的张量值。</span></span><br><span class="line">--&gt;OrderedDict([(<span class="string">'weights'</span>, tensor([-<span class="number">2.1188</span>])), (<span class="string">'bias'</span>, tensor([<span class="number">0.0635</span>]))])</span><br></pre></td></tr></tbody></table></figure><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 训练一个模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### loss function ，损失函数值，越大，数据越乱。用于度量y_pred和y_test之间的差距</span></span><br><span class="line"><span class="comment"># MAE 3 4 5; 2 6 4 = 1.33</span></span><br><span class="line"><span class="comment"># MSE 3 4 5; 2 6 4 = 2</span></span><br><span class="line"><span class="comment"># 两种比较方式，每种参数只和自己比</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### optimizer ，告诉我们的模型怎样朝向正确的参数走过去</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">由于google colab是单步运行，所以每次调参后，应该从建立model_0处重新向后运行</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">loss_fn = nn.L1Loss() <span class="comment">#MAE,</span></span><br><span class="line"><span class="comment"># nn.L1Loss() 是 PyTorch 中的一个损失函数，用于计算预测值和目标值之间的平均绝对误差（Mean Absolute Error，MAE）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># torch.optim.SGD: 这是 PyTorch 中的随机梯度下降优化器的类。它实现了随机梯度下降算法，用于更新模型的参数以最小化损失函数。这个优化器需要指定要优化的参数和学习率等超参数。</span></span><br><span class="line">optimizer = torch.optim.SGD(params = model_0.parameters(), lr = <span class="number">0.1</span>) <span class="comment">#lr 怎么调（跑了一个模型后观察一下，曲线平，则加大10倍），一般0.01、0.1没问题</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">epochs = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">train_loss_values = []</span><br><span class="line">test_loss_values = []</span><br><span class="line">epoch_count = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Put model in training mode:</span></span><br><span class="line">  model_0.train()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 1. forward pass, using forward function</span></span><br><span class="line">  y_pred = model_0(X_train)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 2. Calculate loss</span></span><br><span class="line">  loss = loss_fn(y_pred, y_train)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 3. zero_grad 在每一次迭代中，我们都需要在反向传播之前将梯度归零，</span></span><br><span class="line">  <span class="comment">#这是因为 PyTorch 默认会在进行梯度计算时，将新计算得到的梯度累加到已存在的梯度上，</span></span><br><span class="line">  <span class="comment">#而我们希望每次迭代都是独立的。因此，使用 optimizer.zero_grad() 就可以很方便地实现这一步骤。</span></span><br><span class="line">  optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 4. back prop 梯度计算</span></span><br><span class="line">  loss.backward()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 5. Progress optimizer 更新梯度</span></span><br><span class="line">  optimizer.step()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 6. 调用 model_0.eval() 将模型切换到评估模式（不会梯度计算）。</span></span><br><span class="line">  model_0.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">with</span> torch.inference_mode():</span><br><span class="line">    test_pred = model_0(X_test)</span><br><span class="line">    epoch_count.append(epoch)</span><br><span class="line">    test_loss = loss_fn(test_pred, y_test.<span class="built_in">type</span>(torch.<span class="built_in">float</span>))</span><br><span class="line">    train_loss_values.append(loss.detach().numpy())  <span class="comment"># loss.detach().numpy() 将 PyTorch 张量转换为 NumPy 数组时，通常是为了利用 NumPy 提供的丰富功能进行数据处理、分析或者可视化。</span></span><br><span class="line">    test_loss_values.append(test_loss.detach().numpy())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"Epoch:<span class="subst">{epoch}</span> | Train Loss:<span class="subst">{loss}</span> | Test Loss:<span class="subst">{test_loss}</span>"</span>)</span><br><span class="line">    </span><br><span class="line">--&gt;Epoch:<span class="number">0</span> | Train Loss:<span class="number">1.3358044624328613</span> | Test Loss:<span class="number">2.610489845275879</span></span><br><span class="line">Epoch:<span class="number">1</span> | Train Loss:<span class="number">1.2205944061279297</span> | Test Loss:<span class="number">2.4757800102233887</span></span><br><span class="line">Epoch:<span class="number">2</span> | Train Loss:<span class="number">1.1053844690322876</span> | Test Loss:<span class="number">2.3410699367523193</span></span><br><span class="line">Epoch:<span class="number">3</span> | Train Loss:<span class="number">0.9938250780105591</span> | Test Loss:<span class="number">2.216449022293091</span></span><br><span class="line">Epoch:<span class="number">4</span> | Train Loss:<span class="number">0.9000433683395386</span> | Test Loss:<span class="number">2.097005844116211</span></span><br><span class="line">Epoch:<span class="number">5</span> | Train Loss:<span class="number">0.8182994723320007</span> | Test Loss:<span class="number">1.9881856441497803</span></span><br><span class="line">Epoch:<span class="number">6</span> | Train Loss:<span class="number">0.7505138516426086</span> | Test Loss:<span class="number">1.8903448581695557</span></span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">plt.plot(epoch_count, train_loss_values, label = <span class="string">"Train Loss"</span>)</span><br><span class="line">plt.plot(epoch_count, test_loss_values, label = <span class="string">"Test Loss"</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">"Training and test loss curves"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Loss"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Epochs"</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br></pre></td></tr></tbody></table></figure><p><img src="/posts/dfb3c4cb/pytorch_%E5%B7%A5%E4%BD%9C%E6%B5%812.png" alt="pytorch_工作流2"></p><h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">model_0.<span class="built_in">eval</span>() <span class="comment">#评价模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.inference_mode(): <span class="comment">#做预测</span></span><br><span class="line">  y_preds = model_0(X_test)</span><br><span class="line"></span><br><span class="line">y_preds</span><br><span class="line">--&gt;tensor([<span class="number">0.5704</span>, <span class="number">0.5693</span>, <span class="number">0.5683</span>, <span class="number">0.5672</span>, <span class="number">0.5661</span>, <span class="number">0.5650</span>, <span class="number">0.5639</span>, <span class="number">0.5629</span>, <span class="number">0.5618</span>,</span><br><span class="line">        <span class="number">0.5607</span>])</span><br><span class="line">model_0.state_dict()</span><br><span class="line">--&gt;OrderedDict([(<span class="string">'weights'</span>, tensor([-<span class="number">0.0539</span>])), (<span class="string">'bias'</span>, tensor([<span class="number">0.6135</span>]))])</span><br><span class="line"></span><br><span class="line">plot_predictions(predictions = y_preds)</span><br></pre></td></tr></tbody></table></figure><p><img src="/posts/dfb3c4cb/pytorch_%E5%B7%A5%E4%BD%9C%E6%B5%813.png" alt="pytorch_工作流3"></p><h3 id="保存模型与数据读取"><a href="#保存模型与数据读取" class="headerlink" title="保存模型与数据读取"></a>保存模型与数据读取</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存模型到google 云端硬盘</span></span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">MODEL_PATH = Path(<span class="string">"models"</span>)</span><br><span class="line"></span><br><span class="line">MODEL_PATH.mkdir(parents = <span class="literal">True</span>, exist_ok = <span class="literal">True</span>)</span><br><span class="line">MODEL_NAME = <span class="string">"pytorch_workflow_model_0.pth"</span></span><br><span class="line">MODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME</span><br><span class="line">MODEL_SAVE_PATH</span><br><span class="line"></span><br><span class="line">torch.save(obj = model_0.state_dict(), f = MODEL_SAVE_PATH)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据至新模型</span></span><br><span class="line">loaded_model_0 = LinearRegressionModel()</span><br><span class="line">loaded_model_0.state_dict()</span><br><span class="line"><span class="comment"># 赋值参数</span></span><br><span class="line">loaded_model_0.load_state_dict(torch.load(f = MODEL_SAVE_PATH))</span><br><span class="line"></span><br><span class="line">                         </span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>评论区食用说明</title>
      <link href="/posts/1a827395/"/>
      <url>/posts/1a827395/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>评论区需要搭外网<code>vpn</code>才能查看和发表评论。</p><span id="more"></span><p>本博客的评论功能，由<code>Vercel</code>云函数部署实现。</p><p>这很有可能是导致在中国大陆访问速度较慢甚至无法访问的根本原因。</p><p>后续会进行优化，或者重新部署hh（<strong>挖坑</strong>）</p></body></html>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> twikoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> twikoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GVim_配置分享</title>
      <link href="/posts/34cb7fe1/"/>
      <url>/posts/34cb7fe1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>来给大家分享一下个人使用的GVim配置，该文章后续会一直更新。我是一位初学vim的小萌新，打算用这篇文章记录下GVim的学习历程哈哈。希望也能帮到大家。如有不足，欢迎留言。🙏</p><span id="more"></span><h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><p>自 <code>LazyVim</code> 出现以后，我也尝试过 <code>neovim</code> 。但一段时间后，又转回了GVim。有两方面原因：</p><ul><li>LazyVim很方便，提供了大量的快捷键操作，快捷的插件管理。但是正因如此，我需要花费大量的成本去学习。现在的我确实没有足够的时间成本去学习这门工具</li><li>自己更喜欢从无到有，一步一个脚印的去掌握这门工具。从根基开始建立一栋大楼，更加有成就感。同时，这也能让我在实践中确切明白自身的需求，回归工具的本质。提高熟练度的同时，规避了臃肿的配置。</li></ul><h1 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">call plug<span class="comment">#begin('~/vimfiles/plugged')</span></span><br><span class="line">Plug <span class="string">'chr4/nginx.vim'</span></span><br><span class="line">Plug <span class="string">'vim-scripts/c.vim'</span></span><br><span class="line">Plug <span class="string">'scrooloose/nerdtree'</span></span><br><span class="line">Plug <span class="string">'scrooloose/syntastic'</span></span><br><span class="line">Plug <span class="string">'preservim/vim-indent-guides'</span></span><br><span class="line">Plug <span class="string">'neoclide/coc.nvim'</span>, {<span class="string">'branch'</span>: <span class="string">'release'</span>}  <span class="string">"补全</span></span><br><span class="line"><span class="string">Plug 'vim-airline/vim-airline'  "</span>状态栏 </span><br><span class="line">Plug <span class="string">'vim-airline/vim-airline-themes'</span></span><br><span class="line">Plug <span class="string">'scrooloose/nerdcommenter'</span> <span class="string">"注释</span></span><br><span class="line"><span class="string">Plug 'junegunn/vim-easy-align'  "</span>对齐</span><br><span class="line">Plug <span class="string">'dense-analysis/ale'</span>   <span class="string">"语法检查</span></span><br><span class="line"><span class="string">call plug#end()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span>-------------- vim 的插件设置------------------<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> NerdTree</span><br><span class="line"><span class="built_in">map</span> &lt;F3&gt; :NERDTreeMirror&lt;CR&gt;</span><br><span class="line"><span class="built_in">map</span> &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">let NERDTreeShowBookmarks=<span class="number">1</span><span class="string">"当打开NERDTree窗口时，自动显示Bookmarks</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> YouCompleteMe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"vim-indent</span></span><br><span class="line"><span class="string">"</span> 随 vim 自启动</span><br><span class="line">let g:indent_guides_enable_on_vim_startup=<span class="number">1</span></span><br><span class="line"><span class="string">" 从第二层开始可视化显示缩进</span></span><br><span class="line"><span class="string">let g:indent_guides_start_level=2</span></span><br><span class="line"><span class="string">"</span> 色块宽度</span><br><span class="line">let g:indent_guides_guide_size=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">"---------------------------------------------------"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="界面基础设置"><a href="#界面基础设置" class="headerlink" title="界面基础设置"></a>界面基础设置</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" 字体设置</span></span><br><span class="line"><span class="string">set guifont=Fira_Code_medium:h14:W500:cANSI:qDRAFT</span></span><br><span class="line"><span class="string">"</span> 案件映射</span><br><span class="line"><span class="built_in">map</span> J 5gj</span><br><span class="line"><span class="built_in">map</span> K 5gk</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> j gj</span><br><span class="line"><span class="built_in">map</span> k gk</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> H ^</span><br><span class="line"><span class="built_in">map</span> L $</span><br><span class="line"></span><br><span class="line">imap jk &lt;Esc&gt;</span><br><span class="line"></span><br><span class="line">nmap &lt;space&gt;&lt;Cr&gt; :nohls&lt;Cr&gt;</span><br><span class="line"><span class="string">"代码高亮</span></span><br><span class="line"><span class="string">syntax on</span></span><br><span class="line"><span class="string">"</span>工具栏取消</span><br><span class="line"><span class="built_in">set</span> guioptions=</span><br><span class="line"><span class="string">"显示行号</span></span><br><span class="line"><span class="string">set number</span></span><br><span class="line"><span class="string">"</span>gvim的tab默认长度</span><br><span class="line"><span class="built_in">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> shiftwidth=<span class="number">4</span></span><br><span class="line"><span class="string">"指定文件的编码方式</span></span><br><span class="line"><span class="string">"</span>Vim 在与屏幕/键盘交互时使用的编码(取决于实际的终端的设定)        </span><br><span class="line"><span class="string">" 编码设置</span></span><br><span class="line"><span class="string">set encoding=utf-8</span></span><br><span class="line"><span class="string">set fileencodings=utf-8,cp936,gb2123</span></span><br><span class="line"><span class="string">if has("</span>win32<span class="string">")</span></span><br><span class="line"><span class="string">set fileencoding=utf-8</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">set fileencoding=utf-8</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">source $VIMRUNTIME/delmenu.vim  "</span>解决菜单乱码</span><br><span class="line">source $VIMRUNTIME/menu.vim</span><br><span class="line">language messages zh_CN.utf-<span class="number">8</span>  <span class="string">"解决consle输出乱码</span></span><br><span class="line"><span class="string">"</span>显示括号之间的匹配</span><br><span class="line"><span class="built_in">set</span> showmatch</span><br><span class="line"><span class="string">"支持鼠标操作</span></span><br><span class="line"><span class="string">set mouse=a</span></span><br><span class="line"><span class="string">"</span>自动缩进</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="string">"set smartindent</span></span><br><span class="line"><span class="string">"</span>最后状态栏变为两行</span><br><span class="line"><span class="built_in">set</span> laststatus=<span class="number">2</span></span><br><span class="line"><span class="string">"看到每次输入的指令</span></span><br><span class="line"><span class="string">set showcmd</span></span><br><span class="line"><span class="string">"</span>支持<span class="number">256</span>位颜色</span><br><span class="line"><span class="built_in">set</span> t_Co=<span class="number">256</span></span><br><span class="line"><span class="string">"通过退格键换行</span></span><br><span class="line"><span class="string">set backspace=start,eol,indent</span></span><br><span class="line"><span class="string">"</span>开启搜索代码高亮</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"><span class="built_in">set</span> incsearch</span><br><span class="line"><span class="string">"保证最下面5行</span></span><br><span class="line"><span class="string">set scrolloff=5</span></span><br><span class="line"><span class="string">"</span>组合键的时间间隔</span><br><span class="line"><span class="built_in">set</span> timeoutlen=<span class="number">500</span></span><br><span class="line"><span class="string">"指定行数和列数</span></span><br><span class="line"><span class="string">set lines=30 columns=80</span></span><br><span class="line"><span class="string">"</span>背景颜色</span><br><span class="line">colorscheme darcula</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" 标签页</span></span><br><span class="line"><span class="string"> set showtabline=2          "</span> 总是显示标签栏</span><br><span class="line"><span class="built_in">set</span> showcmd   <span class="string">" 状态栏显示目前所执行的指令</span></span><br><span class="line"><span class="string">set laststatus=2 "</span> 开启状态栏信息</span><br><span class="line"><span class="built_in">set</span> cmdheight=<span class="number">1</span>    <span class="string">" 命令行的高度</span></span><br><span class="line"><span class="string">"</span>不显示工具/菜单栏</span><br><span class="line"><span class="built_in">set</span> guioptions-=T <span class="string">"工具栏</span></span><br><span class="line"><span class="string"> "</span><span class="built_in">set</span> guioptions-=m <span class="string">"菜单栏</span></span><br><span class="line"><span class="string">set guioptions-=L "</span>左边滚动条</span><br><span class="line"><span class="built_in">set</span> guioptions-=r <span class="string">"右边滚动条</span></span><br><span class="line"><span class="string">set guioptions-=b "</span> 底部滚动条</span><br><span class="line"><span class="built_in">set</span> guioptions-=e <span class="string">" 使用内置 tab 样式而不是 gui</span></span><br><span class="line"><span class="string">let g:airline_powerline_fonts = 1  "</span>关于状态栏的配置</span><br><span class="line"><span class="string">" 缺省自动匹配主题</span></span><br><span class="line"><span class="string">let g:airline_theme='base16_classic' </span></span><br><span class="line"><span class="string">let g:airline#extensions#tabline#enabled = 1  "</span> Air-line 显示上面的buffer tab</span><br><span class="line">let g:airline<span class="comment">#extensions#ale#enabled = 1</span></span><br><span class="line">let g:airline<span class="comment">#extensions#coc#enabled = 1 "coc</span></span><br><span class="line"><span class="string">"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.</span></span><br><span class="line"><span class="string">"</span>If yo<span class="string">u're usin</span></span><br></pre></td></tr></tbody></table></figure><h1 id="自动括号匹配"><a href="#自动括号匹配" class="headerlink" title="自动括号匹配"></a>自动括号匹配</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">inoremap ( ()&lt;Esc&gt;i</span><br><span class="line">inoremap [ []&lt;Esc&gt;i</span><br><span class="line">inoremap { {}&lt;Esc&gt;i </span><br><span class="line">autocmd Syntax html,vim inoremap &lt; &lt;lt&gt;&gt;&lt;Esc&gt;i| inoremap &gt; &lt;c-r&gt;=ClosePair(<span class="string">'&gt;'</span>)&lt;CR&gt;</span><br><span class="line">inoremap ) &lt;c-r&gt;=ClosePair(<span class="string">')'</span>)&lt;CR&gt;</span><br><span class="line">inoremap ] &lt;c-r&gt;=ClosePair(<span class="string">']'</span>)&lt;CR&gt;</span><br><span class="line">inoremap } &lt;c-r&gt;=CloseBracket()&lt;CR&gt;</span><br><span class="line">inoremap <span class="string">" &lt;c-r&gt;=QuoteDelim('"</span><span class="string">')&lt;CR&gt;</span></span><br><span class="line"><span class="string">inoremap '</span> &lt;c-r&gt;=QuoteDelim(<span class="string">"'"</span>)&lt;CR&gt;</span><br><span class="line">function! ClosePair(char)</span><br><span class="line"><span class="keyword">if</span> getline(<span class="string">'.'</span>)[col(<span class="string">'.'</span>) - <span class="number">1</span>] == a:char</span><br><span class="line"><span class="keyword">return</span> <span class="string">"\&lt;Right&gt;"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a:char</span><br><span class="line">endif</span><br><span class="line">endf</span><br><span class="line">function! CloseBracket()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">match</span>(getline(line(<span class="string">'.'</span>) + <span class="number">1</span>), <span class="string">'\s*}'</span>) &lt; <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"\&lt;CR&gt;}"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"\&lt;Esc&gt;j0f}a"</span></span><br><span class="line">endif</span><br><span class="line">endf</span><br><span class="line">function! QuoteDelim(char)</span><br><span class="line">let line = getline(<span class="string">'.'</span>)</span><br><span class="line">let col = col(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">if</span> line[col - <span class="number">2</span>] == <span class="string">"\\"</span></span><br><span class="line"><span class="keyword">return</span> a:char</span><br><span class="line">elseif line[col - <span class="number">1</span>] == a:char</span><br><span class="line"><span class="keyword">return</span> <span class="string">"\&lt;Right&gt;"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a:char.a:char.<span class="string">"\&lt;Esc&gt;i"</span></span><br><span class="line">endif</span><br><span class="line">endf</span><br></pre></td></tr></tbody></table></figure><h1 id="编译、运行"><a href="#编译、运行" class="headerlink" title="编译、运行"></a>编译、运行</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">func! CompileC()  <span class="string">" 编译C源文件</span></span><br><span class="line"><span class="string">    exec "</span>w<span class="string">"</span></span><br><span class="line"><span class="string">    exec "</span>!g++ -Wall %<span class="string">"</span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string">func! CompileCpp()  "</span> 编译C++源文件</span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"w"</span></span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"!g++ -Wall %"</span></span><br><span class="line">endfunc</span><br><span class="line">func! Compilefortran()  <span class="string">" 编译fortran源文件</span></span><br><span class="line"><span class="string">    exec "</span>w<span class="string">"</span></span><br><span class="line"><span class="string">exec "</span>!gfortran -Wall %<span class="string">"</span></span><br><span class="line"><span class="string">endfunc </span></span><br><span class="line"><span class="string">func! RunLua()  "</span> 运行Lua源文件</span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"w"</span></span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"!lua %"</span></span><br><span class="line">endfunc</span><br><span class="line">func! RunPerl()  <span class="string">" 运行Perl源文件</span></span><br><span class="line"><span class="string">    exec "</span>w<span class="string">"</span></span><br><span class="line"><span class="string">    exec "</span>!perl %<span class="string">"</span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string">func! RunPython()  "</span> 运行Python源文件</span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"w"</span></span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"!python %"</span></span><br><span class="line">endfunc</span><br><span class="line">func! CompileCode()  <span class="string">" 根据文件类型自动选择相应的编译函数</span></span><br><span class="line"><span class="string">    exec "</span>w<span class="string">"</span></span><br><span class="line"><span class="string">    if &amp;filetype == "</span>c<span class="string">"</span></span><br><span class="line"><span class="string">        exec "</span>call CompileC()<span class="string">"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == "</span>cpp<span class="string">"</span></span><br><span class="line"><span class="string">        exec "</span>call CompileCpp()<span class="string">"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == "</span>fortran<span class="string">"</span></span><br><span class="line"><span class="string">        exec "</span>call Compilefortran()<span class="string">"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == "</span>lua<span class="string">"</span></span><br><span class="line"><span class="string">        exec "</span>call RunLua()<span class="string">"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == "</span>perl<span class="string">"</span></span><br><span class="line"><span class="string">        exec "</span>call RunPerl()<span class="string">"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == "</span>python<span class="string">"</span></span><br><span class="line"><span class="string">        exec "</span>call RunPython()<span class="string">"</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string">func! RunResult()  "</span> 运行可执行文件</span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"w"</span></span><br><span class="line">    <span class="keyword">if</span>  &amp;filetype == <span class="string">"c"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"w"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!gcc % -Wall -std=c99 -O2 -o %&lt;.exe"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!start cmd /c  \"\"%&lt;.exe\" &amp; pause &amp; del *.exe\""</span></span><br><span class="line">    elseif &amp;filetype == <span class="string">"cpp"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"w"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!g++ % -Wall -std=c++11 -O2 -o %&lt;.exe"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!start cmd /c  \"\"%&lt;.exe\" &amp; pause &amp; del *.exe\""</span></span><br><span class="line">    elseif &amp;filetype == <span class="string">"fortran"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"w"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!gfortran % -Wall  -O2 -o %&lt;.exe"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!start cmd /c  \"\"%&lt;.exe\" &amp; pause &amp; del *.exe\""</span></span><br><span class="line">    elseif &amp;filetype == <span class="string">"lua"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!start cmd /c lua %&lt;.lua &amp; pause"</span></span><br><span class="line">    elseif &amp;filetype == <span class="string">"perl"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!start cmd /c perl %&lt;.pl &amp; pause"</span></span><br><span class="line">    elseif &amp;filetype == <span class="string">"python"</span></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"w"</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">"!start cmd /c \"python  %&lt;.py &amp; pause\""</span></span><br><span class="line">elseif &amp;filetype == <span class="string">"markdown"</span></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"w"</span></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"MarkdownPreview"</span></span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line"><span class="string">" Ctrl + f5 一键保存、编译</span></span><br><span class="line"><span class="string">map &lt;C-f5&gt; :call CompileCode()&lt;CR&gt;  </span></span><br><span class="line"><span class="string">imap &lt;C-f5&gt; &lt;ESC&gt;:call CompileCode()&lt;CR&gt;</span></span><br><span class="line"><span class="string">vmap &lt;C-f5&gt; &lt;ESC&gt;:call CompileCode()&lt;CR&gt;</span></span><br><span class="line"><span class="string">"</span> Ctrl + b 一键保存、运行</span><br><span class="line"><span class="built_in">map</span> &lt;C-b&gt; :call RunResult()&lt;CR&gt;    </span><br><span class="line">imap &lt;C-b&gt; &lt;ESC&gt;:call RunResult()&lt;CR&gt;</span><br><span class="line">vmap &lt;C-b&gt; &lt;ESC&gt;:call RunResult()&lt;CR&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/posts/34cb7fe1/image-20240226023121950.png" alt="image-20240226023121950"></p></body></html>]]></content>
      
      
      <categories>
          
          <category> GVim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gvim </tag>
            
            <tag> 配置相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spawn_failed处理报告</title>
      <link href="/posts/cc739906/"/>
      <url>/posts/cc739906/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="一、错误说明"><a href="#一、错误说明" class="headerlink" title="一、错误说明"></a>一、错误说明</h1><p>在上传Hexo博客到搭建到 Github 的项目时，已经使用 <code>hexo s</code> 预览成功了，但在 <code>hexo d</code> 部署到个人博客的时候出现了以下问题：</p><span id="more"></span><p><img src="/posts/cc739906/hexo_d%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A5.png"><br>这种情况说明，<mark style="background: #FF5582A6;">Github公钥出现错误，重新添加公钥即可</mark>。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">公钥：</span><br><span class="line">使用https协议，每次pull, push都要输入密码，相当的烦。  </span><br><span class="line">使用git协议，然后使用ssh密钥。这样可以省去每次都输密码。</span><br><span class="line"></span><br><span class="line">公钥我们一般是给服务器的,他们到时候在权限中加入我给的公钥,然后当我从远地仓库中下载项目的时候,我在 git clone xxx 的时候，那个服务器我通过他的绑定的公钥来匹配我的私钥，这个时候,如果匹配,则就可以正常下载,如果不匹配,则失败。</span><br><span class="line"></span><br><span class="line">大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。</span><br></pre></td></tr></tbody></table></figure><h1 id="二、修改配置"><a href="#二、修改配置" class="headerlink" title="二、修改配置"></a>二、修改配置</h1><p>按照提示，先查看自己的博客配置文件 <code>_config.yml</code> ，在文件最底处修改内容如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:yourname/yourname.github.io.git   # yourname，自己Github用户名</span><br><span class="line">branch: master# 设置分支管理</span><br></pre></td></tr></tbody></table></figure><h1 id="三、添加公钥"><a href="#三、添加公钥" class="headerlink" title="三、添加公钥"></a>三、添加公钥</h1><h2 id="3-1-测试链接"><a href="#3-1-测试链接" class="headerlink" title="3.1 测试链接"></a>3.1 测试链接</h2><p>在博客目录，打开 <code>Git Bash Here</code> 输入以下代码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure><p>如下图结果，<strong>Permission denied(publickey)</strong> ，证明确实缺少公钥。<br><img src="/posts/cc739906/Permission_denied(publickey).png"></p><h2 id="3-2-添加公钥"><a href="#3-2-添加公钥" class="headerlink" title="3.2 添加公钥"></a>3.2 添加公钥</h2><p>首先在本地创建 <code>SSH Keys</code> </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "yourmail"   # 后面为Github注册邮箱</span><br></pre></td></tr></tbody></table></figure><p>注意在 <strong>Overwrite(y/n)?</strong> 后添加 <strong>y</strong> 后回车，其它一直回车，生成 <code>SSH Keys</code><br><img src="/posts/cc739906/%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5.png"><br>根据上图找到路径 <code>xxx/.ssh/id_rsa.pub</code> ，打开文件，复制全部文本<br>进入自己的Github，找到SSH/Add new，输入SSH Keys，将复制来的内容粘贴在 <code>Key</code> 中。保存！<br><img src="/posts/cc739906/20240117185033.png"><br><img src="/posts/cc739906/20240117185040.png"></p><h2 id="3-3-重新部署"><a href="#3-3-重新部署" class="headerlink" title="3.3 重新部署"></a>3.3 重新部署</h2><p>先测试<code>SSH连接</code> :</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure><p><img src="/posts/cc739906/20240117185434.png"><br>成功连接！重新部署项目<code>hexo d</code><br><img src="/posts/cc739906/20240117185539.png"><br>部署成功！(如果还是无效的话，见四)</p><h1 id="四、ssh超时错误"><a href="#四、ssh超时错误" class="headerlink" title="四、ssh超时错误"></a>四、ssh超时错误</h1><p>笔者在添加公钥的同时，设置了<code>.ssh配置文件config</code>中的 Port 。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:xxxxx/xxxx.git my-awesome-proj</span><br><span class="line">Cloning into 'my-awesome-proj'...</span><br><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">$ # This should also timeout</span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br><span class="line"></span><br><span class="line">$ # but this might work</span><br><span class="line">$ ssh -T -p 443 git@ssh.github.com</span><br><span class="line">Hi xxxx! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line">$ # Override SSH settings</span><br><span class="line"></span><br><span class="line">$ vim ~/.ssh/config  //没有该文件，就新建一个</span><br><span class="line">```</span><br><span class="line"># Add section below to it</span><br><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br><span class="line">```</span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi xxxxx! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line">$ git clone git@github.com:xxxxxx/xxxxx.git my-awesome-proj</span><br><span class="line">Cloning into 'my-awesome-proj'...</span><br><span class="line">remote: Enumerating objects: 15, done.</span><br><span class="line">remote: Counting objects: 100% (15/15), done.</span><br><span class="line">remote: Compressing objects: 100% (14/14), done.</span><br><span class="line">remote: Total 15 (delta 0), reused 15 (delta 0), pack-reused 0</span><br><span class="line">Receiving objects: 100% (15/15), 22.90 KiB | 4.58 MiB/s, done.</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spawn_failed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客图片插入功能</title>
      <link href="/posts/beac9b05/"/>
      <url>/posts/beac9b05/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><code>hexo-abbrlink</code>与<code>hexo-asset-images</code>插件冲突的解决办法</p><span id="more"></span><h1 id="一、需求描述"><a href="#一、需求描述" class="headerlink" title="一、需求描述"></a>一、需求描述</h1><p>目前，图片本地插入的三种主流实现方法，分别为：<code>img路径方法插入图片</code>、 <code>！[]()方式插入图片</code>、<code>通过{%%}插入本地图片</code><br>其中，<code>！[]()方式插入图片</code>是markdown的插入图片语句，语法为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片加载失败的描述](图片链接)</span><br></pre></td></tr></tbody></table></figure><p>这种格式，能够很好满足我使用Typora，实时预览的需求。<br>通常情况下，使用如下插件便可以很方便的完成相对路径的地址转换（实现途径自行查询）：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></tbody></table></figure><p>但是，由于笔者使用了<code>hexo-abbrlink</code>插件，改变了github中图片路径，导致github仓库中相对路径，无法查询到对应图片。<br><img src="/posts/beac9b05/20240118200036.png"></p><h1 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h1><p>首先，下载<code>cheerio</code>插件:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cheerio</span><br></pre></td></tr></tbody></table></figure><p>然后，在原有<code>hexo-asset-images</code>插件基础上修改，实现相对路径的变更</p><figure class="highlight javascript"><figcaption><span>hexo-asset-images/index.js</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPosition</span>(<span class="params">str, m, i</span>) {</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">split</span>(m, i).<span class="title function_">join</span>(m).<span class="property">length</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">'after_post_render'</span>, <span class="keyword">function</span>(<span class="params">data</span>) {</span><br><span class="line">    <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">post_asset_folder</span>) {</span><br><span class="line">        <span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line">        <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">        <span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">        link = link.<span class="title function_">substring</span>(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.<span class="property">length</span>; i++) {</span><br><span class="line">            <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(data[key], {</span><br><span class="line">                <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">            $(<span class="string">'img'</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">                <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">                <span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">'src'</span>).<span class="title function_">replace</span>(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src)) {</span><br><span class="line">                    <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">                    <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">                    <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">'/'</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>) {</span><br><span class="line">                        <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">                    });</span><br><span class="line">                    <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">'/'</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>) {</span><br><span class="line">                        <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">                    });</span><br><span class="line">                    <span class="keyword">if</span> (linkArray[linkArray.<span class="property">length</span> - <span class="number">1</span>] == srcArray[<span class="number">0</span>])</span><br><span class="line">                        srcArray.<span class="title function_">shift</span>();</span><br><span class="line">                    src = srcArray.<span class="title function_">join</span>(<span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> root = config.<span class="property">root</span> &amp;&amp; config.<span class="property">root</span>.<span class="title function_">endsWith</span>(<span class="string">'/'</span>) ? config.<span class="property">root</span> : <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> abbrlink = data.<span class="property">abbrlink</span>;</span><br><span class="line">                    <span class="keyword">if</span> (abbrlink) {</span><br><span class="line">                        <span class="keyword">if</span> (src.<span class="title function_">indexOf</span>(abbrlink) &gt; -<span class="number">1</span>) {</span><br><span class="line">                            <span class="comment">// 使用 hexo asset_img：{% asset_img 20190522103754.jpg %}</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">// root = /</span></span><br><span class="line">                            <span class="comment">// link = posts/</span></span><br><span class="line">                            <span class="comment">// abbrlink = d6d2f549</span></span><br><span class="line">                            <span class="comment">// src = d6d2f549/20190522103754.jpg</span></span><br><span class="line">                            $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">'src'</span>, root + link + src);</span><br><span class="line">                        } <span class="keyword">else</span> {</span><br><span class="line">                            <span class="comment">// 使用 markdown 标准语法：![图片](title/20190522103754.jpg)</span></span><br><span class="line">                            <span class="comment">// 或者 typora 其中一个用法：![图片](20190522103754.jpg)</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">// root = /</span></span><br><span class="line">                            <span class="comment">// link = posts/</span></span><br><span class="line">                            <span class="comment">// abbrlink = d6d2f549</span></span><br><span class="line">                            <span class="comment">// src = title/20190522103754.jpg</span></span><br><span class="line">                            <span class="comment">// 或者 src = 20190522103754.jpg</span></span><br><span class="line">                            <span class="keyword">if</span> (src.<span class="title function_">indexOf</span>(<span class="string">'/'</span>) &gt; -<span class="number">1</span>) {</span><br><span class="line">                              src = src.<span class="title function_">substring</span>(src.<span class="title function_">lastIndexOf</span>(<span class="string">'/'</span>) + <span class="number">1</span>);</span><br><span class="line">                            }</span><br><span class="line">                            $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">'src'</span>, root + link + src);</span><br><span class="line">                        }</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">'src'</span>, root + link + src);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">            data[key] = $.<span class="title function_">html</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><figcaption><span>hexo-asset-images/package.json</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"hexo-asset-image"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Give asset image in hexo a absolutely path automatically"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: {</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="string">"keywords"</span>: [</span><br><span class="line">    <span class="string">"hexo"</span>,</span><br><span class="line">    <span class="string">"iamge"</span>,</span><br><span class="line">    <span class="string">"asset"</span>,</span><br><span class="line">    <span class="string">"path"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"codefalling"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: {</span><br><span class="line">    <span class="string">"cheerio"</span>: <span class="string">"^0.19.0"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>在typora中进行图片插入时，<strong>图片名中间不能有空格</strong>，否则无法完成相对路径的自动转换。</li><li>typora图片插入的相对路径，不要忘记设置。</li><li>使用该插件后，只能使用<code>npm new "XXX"</code>方式，生成<code>.md</code>文档。(自己向<code>_post</code>文件中<code>拖拽</code>和<code>新建对应图片文件夹</code>，是无效滴)</li><li>不同博客的github中的文件路径可能有所差别，可以在github相应博文<code>.html</code>页面中进行比对(如下)，从而对<code>index.js</code>和<code>package.json</code>中相对路径转换格式做出调整。<br>  <img src="/posts/beac9b05/20240118202448.png"></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> icarus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> icarus </tag>
            
            <tag> 插入图片功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>井字棋（人机对战）</title>
      <link href="/posts/61a28051/"/>
      <url>/posts/61a28051/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>基于<code>pygame</code>实现的井字棋（人机对战）游戏</p><span id="more"></span><p>这款井字棋小游戏中，你将对战很笨的人工智能NanaGo。后续有时间将会对AI内部函数进行完善，<code>make NanaGo great again</code>。</p><h1 id="AI内部函数"><a href="#AI内部函数" class="headerlink" title="AI内部函数"></a>AI内部函数</h1><p>这个ai很笨，只会按照顺序落子。他的核心逻辑就只是for循环。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__computer_chess</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="string">"""</span></span><br><span class="line"><span class="string">      电脑下棋。从左上角开始依次遍历，然后下到第一个empty的地方</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      """</span></span><br><span class="line">      <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">          <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">              <span class="keyword">if</span> self.__chess_map[r][c] == ChessType.EMPTY:</span><br><span class="line">                  self.__chess_map[r][c] = ChessType.FORK</span><br><span class="line">                  <span class="keyword">return</span></span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> enum</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame <span class="comment"># 需先手动下载pygame库：pip install pygame</span></span><br><span class="line"></span><br><span class="line">BG_COLOR = pygame.Color(<span class="string">"#EEEEEE"</span>) <span class="comment"># 背景</span></span><br><span class="line">BOARD_COLAR = pygame.Color(<span class="string">"#E96666"</span>) <span class="comment"># 边框</span></span><br><span class="line">CIRCLE_CHESS_COLOR = pygame.Color(<span class="string">"#3CA273"</span>) <span class="comment"># 画圈圈的棋子的颜色</span></span><br><span class="line">FORK_CHESS_COLOR = pygame.Color(<span class="string">"#5570C2"</span>) <span class="comment"># 画叉的棋子的颜色</span></span><br><span class="line">WIN_LINE_COLOR = pygame.Color(<span class="string">"#FFA801"</span>) <span class="comment"># 获胜划线</span></span><br><span class="line">CIRCLE_WIN_HINT_TEXT_COLOR = pygame.Color(<span class="string">"#029999"</span>) <span class="comment"># 画圈获胜文本</span></span><br><span class="line">FORK_WIN_HINT_TEXT_COLOR = pygame.Color(<span class="string">"#E94466"</span>) <span class="comment"># 画叉获胜文本</span></span><br><span class="line">TIE_HINT_TEXT_COLOR = pygame.Color(<span class="string">"#FAC888"</span>) <span class="comment"># 平局文本</span></span><br><span class="line">RESTART_HINT_TEXT_COLOR = pygame.Color(<span class="string">"#91CBBB"</span>) <span class="comment">#重新开始</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 初试化</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    pygame.display.set_caption(<span class="string">"井字棋AI_NanaGo"</span>)</span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">500</span>,<span class="number">500</span>))</span><br><span class="line">    clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line">    scene = GameScene()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="comment"># 退出判断</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 处理鼠标的输入，传递到我的场景中进行处理</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">                <span class="keyword">if</span> event.<span class="built_in">dict</span>[<span class="string">"button"</span>] == pygame.BUTTON_LEFT:</span><br><span class="line">                    pos = event.<span class="built_in">dict</span>[<span class="string">"pos"</span>] <span class="comment">#pos is a tuple</span></span><br><span class="line">                    scene.on_mouse_left_button_down(pos[<span class="number">0</span>], pos[<span class="number">1</span>])</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEMOTION:</span><br><span class="line">                <span class="comment">#鼠标移动</span></span><br><span class="line">                pos = event.<span class="built_in">dict</span>[<span class="string">"pos"</span>] <span class="comment">#pos is a tuple</span></span><br><span class="line">                scene.on_mouse_motion(pos[<span class="number">0</span>], pos[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#绘制场景</span></span><br><span class="line">        scene.draw(screen)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#更新屏幕</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#限制帧率</span></span><br><span class="line">        clock.tick(<span class="number">30</span>)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChessType</span>(enum.Enum):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    棋子类型，画圈圈的是人类，画叉的是电脑AI</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    EMPTY = <span class="number">0</span></span><br><span class="line">    <span class="string">"""空位，没有被下子"""</span></span><br><span class="line"></span><br><span class="line">    CIRCLE = <span class="number">1</span></span><br><span class="line">    FORK = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameStatus</span>(enum.Enum):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    游戏状态</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    PLAYING = <span class="number">0</span></span><br><span class="line">    CIRCLE_WIN = <span class="number">1</span></span><br><span class="line">    FORK_WIN = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    TIE = <span class="number">3</span></span><br><span class="line">    <span class="string">"""平局"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameScene</span>:</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    游戏场景</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    __game_status: GameStatus = <span class="literal">None</span></span><br><span class="line">    __chess_map: <span class="type">List</span>[<span class="type">List</span>[ChessType]] = <span class="literal">None</span></span><br><span class="line">    __curr_mouse_down_pos: <span class="type">Optional</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]] = <span class="literal">None</span></span><br><span class="line">    __curr_mouse_motion_pos: <span class="type">Optional</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]] = <span class="literal">None</span></span><br><span class="line">    __win_pos_start: <span class="type">Optional</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]] = <span class="literal">None</span></span><br><span class="line">    __win_pos_end: <span class="type">Optional</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]] = <span class="literal">None</span></span><br><span class="line">    __circle_win_hint_text: pygame.Surface = <span class="literal">None</span></span><br><span class="line">    __fork_win_hint_text: pygame.Surface = <span class="literal">None</span></span><br><span class="line">    __tie_hint_text: pygame.Surface = <span class="literal">None</span></span><br><span class="line">    __restart_text: pygame.Surface = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        font = pygame.font.Font(pygame.font.get_default_font(), <span class="number">25</span>)</span><br><span class="line">        self.__circle_win_hint_text = font.render(<span class="string">"You Win"</span>, <span class="literal">True</span>, CIRCLE_WIN_HINT_TEXT_COLOR)</span><br><span class="line">        self.__fork_win_hint_text = font.render(<span class="string">"NanaGo Win"</span>, <span class="literal">True</span>, FORK_WIN_HINT_TEXT_COLOR)</span><br><span class="line">        self.__tie_hint_text = font.render(<span class="string">"Tie"</span>, <span class="literal">True</span>, TIE_HINT_TEXT_COLOR)</span><br><span class="line">        self.__restart_text = font.render(<span class="string">"Click for a new game"</span>, <span class="literal">True</span>, RESTART_HINT_TEXT_COLOR)</span><br><span class="line">        self.__init()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"初始化ing"</span>)</span><br><span class="line">        self.__game_status = GameStatus.PLAYING</span><br><span class="line"></span><br><span class="line">        self.__chess_map = [</span><br><span class="line">            [ChessType.EMPTY,ChessType.EMPTY,ChessType.EMPTY],</span><br><span class="line">            [ChessType.EMPTY,ChessType.EMPTY,ChessType.EMPTY],</span><br><span class="line">            [ChessType.EMPTY,ChessType.EMPTY,ChessType.EMPTY]</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        self.__curr_mouse_down_pos = <span class="literal">None</span></span><br><span class="line">        self.__win_pos_start = <span class="literal">None</span></span><br><span class="line">        self.__win_pos_end = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"电脑先手"</span>)</span><br><span class="line">            self.__computer_chess()</span><br><span class="line">            self.__check_game_over()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"人类先手"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__computer_chess</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        电脑下棋。从左上角开始依次遍历，然后下到第一个empty的地方</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[r][c] == ChessType.EMPTY:</span><br><span class="line">                    self.__chess_map[r][c] = ChessType.FORK</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__check_game_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            circle_count = <span class="number">0</span></span><br><span class="line">            fork_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[r][c] == ChessType.CIRCLE:</span><br><span class="line">                    circle_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> self.__chess_map[r][c] == ChessType.FORK:</span><br><span class="line">                    fork_count += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> circle_count == <span class="number">3</span>:</span><br><span class="line">                self.__game_status = GameStatus.CIRCLE_WIN</span><br><span class="line">                self.__win_pos_start = (<span class="number">0</span>, c)</span><br><span class="line">                self.__win_pos_end = (<span class="number">2</span>, c)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"人类获胜"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> fork_count == <span class="number">3</span>:</span><br><span class="line">                self.__game_status = GameStatus.FORK_WIN</span><br><span class="line">                self.__win_pos_start = (<span class="number">0</span>, c)</span><br><span class="line">                self.__win_pos_end = (<span class="number">2</span>, c)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"电脑获胜"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            circle_count = <span class="number">0</span></span><br><span class="line">            fork_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[r][c] == ChessType.CIRCLE:</span><br><span class="line">                    circle_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> self.__chess_map[r][c] == ChessType.FORK:</span><br><span class="line">                    fork_count += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> circle_count == <span class="number">3</span>:</span><br><span class="line">                self.__game_status = GameStatus.CIRCLE_WIN</span><br><span class="line">                self.__win_pos_start = (r, <span class="number">0</span>)</span><br><span class="line">                self.__win_pos_end = (r, <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"人类获胜"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> fork_count == <span class="number">3</span>:</span><br><span class="line">                self.__game_status = GameStatus.FORK_WIN</span><br><span class="line">                self.__win_pos_start = (r, <span class="number">0</span>)</span><br><span class="line">                self.__win_pos_end = (r, <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"电脑获胜"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING:</span><br><span class="line">            <span class="keyword">return</span>     </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.CIRCLE <span class="keyword">and</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.CIRCLE <span class="keyword">and</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.CIRCLE:</span><br><span class="line">            self.__game_status = GameStatus.CIRCLE_WIN</span><br><span class="line">            self.__win_pos_start = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            self.__win_pos_end = (<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">0</span>][<span class="number">0</span>] == ChessType.FORK <span class="keyword">and</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.FORK <span class="keyword">and</span> self.__chess_map[<span class="number">2</span>][<span class="number">2</span>] == ChessType.FORK:</span><br><span class="line">            self.__game_status = GameStatus.FORK_WIN</span><br><span class="line">            self.__win_pos_start = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            self.__win_pos_end = (<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.CIRCLE <span class="keyword">and</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.CIRCLE <span class="keyword">and</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.CIRCLE:</span><br><span class="line">            self.__game_status = GameStatus.CIRCLE_WIN</span><br><span class="line">            self.__win_pos_start = (<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">            self.__win_pos_end = (<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.__chess_map[<span class="number">2</span>][<span class="number">0</span>] == ChessType.FORK <span class="keyword">and</span> self.__chess_map[<span class="number">1</span>][<span class="number">1</span>] == ChessType.FORK <span class="keyword">and</span> self.__chess_map[<span class="number">0</span>][<span class="number">2</span>] == ChessType.FORK:</span><br><span class="line">            self.__game_status = GameStatus.FORK_WIN</span><br><span class="line">            self.__win_pos_start = (<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">            self.__win_pos_end = (<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        has_empty = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> self.__chess_map[r][c] == ChessType.EMPTY:</span><br><span class="line">                    has_empty = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> has_empty == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> has_empty:</span><br><span class="line">            self.__game_status == GameStatus.TIE</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get_mouse_on_board_pos</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                                 board_pos: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                                 cell_size: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                                 mouse_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]</span>) -&gt;<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取当前鼠标位置在棋盘中的行列位置(index)(eg(0,0)(0,1)(0,2),...(2,0)(2,1)(2,2))，鼠标没有在棋盘中返回(-1,-1)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> self <span class="comment">#为了防止报错或者warning</span></span><br><span class="line">        board_x, board_y = board_pos[<span class="number">0</span>], board_pos[<span class="number">1</span>]</span><br><span class="line">        mouse_x, mouse_y = mouse_pos[<span class="number">0</span>], mouse_pos[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        x, y = mouse_x - board_x, mouse_y - board_y <span class="comment">#用相对距离</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= cell_size * <span class="number">3</span> <span class="keyword">or</span> y &gt;= cell_size * <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">        <span class="comment"># 竖直方向表示行，水平方向表示列</span></span><br><span class="line">        <span class="keyword">return</span> y // cell_size, x // cell_size</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_mouse_left_button_down</span>(<span class="params">self, pos_x: <span class="built_in">int</span>, pos_y: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        鼠标左键按下</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.__curr_mouse_down_pos = (pos_x, pos_y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_mouse_motion</span>(<span class="params">self, pos_x:<span class="built_in">int</span>, pos_y:<span class="built_in">int</span></span>):</span><br><span class="line">        self.__curr_mouse_motion_pos = (pos_x, pos_y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self, screen: pygame.Surface</span>):</span><br><span class="line">        <span class="comment">#填充背景</span></span><br><span class="line">        screen.fill(BG_COLOR)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#绘制棋盘</span></span><br><span class="line">        board_cell_size = <span class="number">100</span></span><br><span class="line">        board_x = <span class="built_in">round</span>(screen.get_width() / <span class="number">2</span> - (<span class="number">3</span> * board_cell_size) / <span class="number">2</span>)</span><br><span class="line">        board_y = <span class="built_in">round</span>(screen.get_height() / <span class="number">2</span> - (<span class="number">3</span> * board_cell_size) / <span class="number">2</span>)</span><br><span class="line">        self.__draw_board(screen, (board_x,board_y),board_cell_size,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果处于游戏中，判断鼠标（人类）是否有落子</span></span><br><span class="line">        <span class="keyword">if</span> self.__game_status == GameStatus.PLAYING <span class="keyword">and</span> self.__curr_mouse_down_pos:</span><br><span class="line">            row, col = self.__get_mouse_on_board_pos((board_x, board_y), board_cell_size, self.__curr_mouse_down_pos)</span><br><span class="line">            <span class="comment"># 人类落子</span></span><br><span class="line">            self.__chess_map[row][col] = ChessType.CIRCLE</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"人类(点击落子):(<span class="subst">{row}</span>, <span class="subst">{col}</span>) &lt;- 圈"</span>)</span><br><span class="line">            self.__check_game_over()</span><br><span class="line">            <span class="keyword">if</span> self.__game_status == GameStatus.PLAYING:</span><br><span class="line">                self.__computer_chess()</span><br><span class="line">                self.__check_game_over()</span><br><span class="line">            self.__curr_mouse_down_pos = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING <span class="keyword">and</span> self.__curr_mouse_down_pos:</span><br><span class="line">            self.__init()</span><br><span class="line"></span><br><span class="line">        self.__draw_chess(screen, (board_x,board_y),board_cell_size,<span class="number">20</span>,<span class="number">5</span>)</span><br><span class="line">        self.__draw_win_line(screen, (board_x,board_y),board_cell_size,<span class="number">3</span>)</span><br><span class="line">        self.__draw_hint_text(screen, (board_x,board_y),board_cell_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_board</span>(<span class="params">self, screen:pygame.Surface, board_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>], cell_size:<span class="built_in">int</span>, line_width:<span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        绘制棋盘</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> self</span><br><span class="line">        x, y = board_pos[<span class="number">0</span>],  board_pos[<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#横线</span></span><br><span class="line">        x1 = x</span><br><span class="line">        x2 = x + <span class="number">3</span> * cell_size</span><br><span class="line">        y1 = y + cell_size</span><br><span class="line">        y2 = y + <span class="number">2</span> * cell_size</span><br><span class="line">        pygame.draw.line(screen,BOARD_COLAR,(x1,y1),(x2, y1),line_width)</span><br><span class="line">        pygame.draw.line(screen,BOARD_COLAR,(x1,y2),(x2, y2),line_width)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        y1 = y</span><br><span class="line">        y2 = y + <span class="number">3</span> * cell_size</span><br><span class="line">        x1 = x + cell_size</span><br><span class="line">        x2 = x + <span class="number">2</span> * cell_size</span><br><span class="line">        pygame.draw.line(screen,BOARD_COLAR,(x1,y1),(x1, y2),line_width)</span><br><span class="line">        pygame.draw.line(screen,BOARD_COLAR,(x2,y1),(x2, y2),line_width)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_chess</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                        screen:pygame.Surface,</span></span><br><span class="line"><span class="params">                        board_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>,<span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                        board_cell_size:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                        padding:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                        border_width:<span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        绘制棋子</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        board_x, board_y = board_pos[<span class="number">0</span>], board_pos[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.__chess_map)):</span><br><span class="line">            row = self.__chess_map[r]</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(row)):</span><br><span class="line">                chess = row[c]</span><br><span class="line">                <span class="keyword">if</span> chess == ChessType.CIRCLE:</span><br><span class="line">                    self.__draw_circle_chess(screen,</span><br><span class="line">                                                (board_x + c * board_cell_size, board_y + r * board_cell_size),</span><br><span class="line">                                                board_cell_size,</span><br><span class="line">                                                padding,</span><br><span class="line">                                                border_width)</span><br><span class="line">                <span class="keyword">elif</span> chess == ChessType.FORK:</span><br><span class="line">                    self.__draw_fork_chess(screen,</span><br><span class="line">                                                (board_x + c * board_cell_size, board_y + r * board_cell_size),</span><br><span class="line">                                                board_cell_size,</span><br><span class="line">                                                padding,</span><br><span class="line">                                                border_width)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_circle_chess</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                            screen:pygame.Surface,</span></span><br><span class="line"><span class="params">                            chess_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>,<span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                            board_cell_size:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                            padding:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                            border_width:<span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        绘制圆棋子</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> self</span><br><span class="line">        chess_x, chess_y = chess_pos[<span class="number">0</span>], chess_pos[<span class="number">1</span>]</span><br><span class="line">        center = <span class="built_in">round</span>(chess_x + board_cell_size / <span class="number">2</span>),  <span class="built_in">round</span>(chess_y + board_cell_size / <span class="number">2</span>)</span><br><span class="line">        radius = <span class="built_in">round</span>(board_cell_size / <span class="number">2</span> - padding)</span><br><span class="line">        pygame.draw.circle(screen, CIRCLE_CHESS_COLOR, center, radius, border_width)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_fork_chess</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                            screen:pygame.Surface,</span></span><br><span class="line"><span class="params">                            chess_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>,<span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                            board_cell_size:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                            padding:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                            border_width:<span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        绘制叉棋子</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> self</span><br><span class="line">        chess_x, chess_y = chess_pos[<span class="number">0</span>], chess_pos[<span class="number">1</span>]</span><br><span class="line">        pygame.draw.line(screen, FORK_CHESS_COLOR, (chess_x + padding, chess_y + padding), (chess_x + board_cell_size - padding, chess_y + board_cell_size - padding ), border_width)</span><br><span class="line">        pygame.draw.line(screen, FORK_CHESS_COLOR, (chess_x + board_cell_size - padding, chess_y + padding), (chess_x + padding, chess_y + board_cell_size - padding ), border_width)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_win_line</span>(<span class="params">self, </span></span><br><span class="line"><span class="params">                        screen:pygame.Surface,</span></span><br><span class="line"><span class="params">                        board_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>,<span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                        cell_size:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                        line_width:<span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        绘制获胜曲线</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> self.__win_pos_start) <span class="keyword">or</span> (<span class="keyword">not</span> self.__win_pos_end):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        board_x, board_y = board_pos[<span class="number">0</span>], board_pos[<span class="number">1</span>]</span><br><span class="line">        pos_start_row, pos_start_col = self.__win_pos_start[<span class="number">0</span>], self.__win_pos_start[<span class="number">1</span>]</span><br><span class="line">        pos_end_row, pos_end_col = self.__win_pos_end[<span class="number">0</span>], self.__win_pos_end[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        half_cell_size = <span class="built_in">round</span>(cell_size / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        start = (board_x + pos_start_col * cell_size + half_cell_size, board_y + pos_start_row * cell_size + half_cell_size)</span><br><span class="line">        end = (board_x + pos_end_col * cell_size + half_cell_size, board_y + pos_end_row * cell_size + half_cell_size)</span><br><span class="line"></span><br><span class="line">        pygame.draw.line(screen, WIN_LINE_COLOR, start, end, line_width)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__draw_hint_text</span>(<span class="params">self, </span></span><br><span class="line"><span class="params">                        screen:pygame.Surface,</span></span><br><span class="line"><span class="params">                        board_pos:<span class="type">Tuple</span>[<span class="built_in">int</span>,<span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">                        cell_size:<span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                        </span>):</span><br><span class="line">        board_y = board_pos[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__game_status == GameStatus.CIRCLE_WIN:</span><br><span class="line">            screen.blit(self.__circle_win_hint_text, (screen.get_width() / <span class="number">2</span> - self.__circle_win_hint_text.get_width() / <span class="number">2</span>, board_y / <span class="number">2</span> - self.__circle_win_hint_text.get_height() / <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">elif</span> self.__game_status == GameStatus.FORK_WIN:</span><br><span class="line">            screen.blit(self.__fork_win_hint_text, (screen.get_width() / <span class="number">2</span> - self.__fork_win_hint_text.get_width() / <span class="number">2</span>, board_y / <span class="number">2</span> - self.__fork_win_hint_text.get_height() / <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">elif</span> self.__game_status == GameStatus.TIE:</span><br><span class="line">            screen.blit(self.__tie_hint_text, (screen.get_width() / <span class="number">2</span> - self.__tie_hint_text.get_width() / <span class="number">2</span>, board_y / <span class="number">2</span> - self.__tie_hint_text.get_height() / <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__game_status != GameStatus.PLAYING:</span><br><span class="line">            <span class="comment">#重新开始的提示</span></span><br><span class="line">            screen.blit(self.__restart_text, (screen.get_width() / <span class="number">2</span> - self.__restart_text.get_width() / <span class="number">2</span>, (screen.get_height() + (board_y + cell_size * <span class="number">3</span>)) / <span class="number">2</span> - self.__restart_text.get_height() / <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 小游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 小游戏 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带头结点的单链表L，设计一个算法使其元素递增 -006</title>
      <link href="/posts/1f97bd59/"/>
      <url>/posts/1f97bd59/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="带头结点的单链表L，设计一个算法使其元素递增"><a href="#带头结点的单链表L，设计一个算法使其元素递增" class="headerlink" title="带头结点的单链表L，设计一个算法使其元素递增"></a>带头结点的单链表L，设计一个算法使其元素递增</h1><span id="more"></span><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​先构成只含一个数据结点的有序单链表，然后以此扫描单链表中剩下的结点p（直至p==NULL为止），在有序表中通过比较查找插入<em>P的前驱结点</em>pre，然后将p插入到pre之后。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>{</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">}LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort</span><span class="params">(LinkList &amp;L)</span></span>{</span><br><span class="line">    LNode *p=L-&gt;next,*pre;   <span class="comment">//p，pre分别作为两个链表的工作指针</span></span><br><span class="line">    LNode *r=p-&gt;next;      <span class="comment">//r为p的后继结点，保证不断链</span></span><br><span class="line">    p-&gt;next=<span class="literal">NULL</span>;         <span class="comment">//构造只含有一个数据结点的有序表</span></span><br><span class="line">    p=r;                <span class="comment">//使得p作为单链表的工作指针</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>){</span><br><span class="line">        r=p-&gt;next;        <span class="comment">//将r后移防止断链</span></span><br><span class="line">        pre=L;          <span class="comment">//每次循环，保证pre指向头结点，方便从头开始比较大小</span></span><br><span class="line">        <span class="keyword">while</span>(pre-&gt;next!=<span class="literal">NULL</span>&amp;&amp;pre-&gt;next-&gt;data&lt;p-&gt;data){    <span class="comment">//比较大小，直到满足，才在pre后面插入p结点</span></span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        p-&gt;next=pre-&gt;next;   <span class="comment">//插入的通用算法</span></span><br><span class="line">        pre-&gt;next=p;</span><br><span class="line">        p=r;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
            <tag> 元素递增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设有两个栈s1、s2都采用顺序栈方式，并共享一个存储区[0,  ,maxsize-1],为了尽量利用空间，减少溢出的可能，可采用栈顶相向，迎面增长的存储方式。试设计s1、s2有关入栈和出栈的操作方式 -008</title>
      <link href="/posts/8d6133f4/"/>
      <url>/posts/8d6133f4/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="设有两个栈s1、s2都采用顺序栈方式，并共享一个存储区-0-maxsize-1-为了尽量利用空间，减少溢出的可能，可采用栈顶相向，迎面增长的存储方式。试设计s1、s2有关入栈和出栈的操作方式"><a href="#设有两个栈s1、s2都采用顺序栈方式，并共享一个存储区-0-maxsize-1-为了尽量利用空间，减少溢出的可能，可采用栈顶相向，迎面增长的存储方式。试设计s1、s2有关入栈和出栈的操作方式" class="headerlink" title="设有两个栈s1、s2都采用顺序栈方式，并共享一个存储区[0,  ,maxsize-1],为了尽量利用空间，减少溢出的可能，可采用栈顶相向，迎面增长的存储方式。试设计s1、s2有关入栈和出栈的操作方式"></a>设有两个栈s1、s2都采用顺序栈方式，并共享一个存储区[0,  ,maxsize-1],为了尽量利用空间，减少溢出的可能，可采用栈顶相向，迎面增长的存储方式。试设计s1、s2有关入栈和出栈的操作方式</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h4 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h4><p>​1、共享栈的定义</p><p>​2、共享栈两个指针在入栈、出栈时的操作</p><h4 id="代码注意点"><a href="#代码注意点" class="headerlink" title="代码注意点"></a>代码注意点</h4><p>​1、共享栈的定义：<strong>数组空间</strong>、数组存储的<strong>两个栈顶指针</strong></p><p>​2、exit(0)和return的区别，exit(0)是直接终止进程，return是返回函数调用。</p><p>​3、return 0：<strong>第一个含义</strong>一般用在主函数结束时，按照程序开发的一般惯例，表示成功完成本函数。<strong>第二个含义</strong>表示假，一般用于<a href="https://so.csdn.net/so/search?q=bool%E5%87%BD%E6%95%B0&amp;spm=1001.2101.3001.7020">bool函数</a>返回值。在C++中也可以直接用int，返回值为0时为假。宏定义ERROR 与FLASE一般为0。</p><p>​ return 1: 与return 0 的第二个含义相对应，<strong>表示真</strong>，正确。宏定义TRUE，OK一般为1。</p><p>​ return -1: 与return 0 的第一个含义相对应，表示返回一个代数值，一般用在<strong>子函数结尾</strong>。按照程序开发的一般惯例，<strong>表示该函数失败</strong>，在数据结构中，一般指**数据溢出(栈只会出现上溢)**，宏定义OVERFLOW 一般为-1。</p><p>​4、switch每一个case后面都要有break</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int <span class="comment">//定义ElemType为int类型</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>{</span><br><span class="line">    ElemType stack[maxsize];</span><br><span class="line">    <span class="type">int</span> top[<span class="number">2</span>];         <span class="comment">//top为两个栈顶指针</span></span><br><span class="line">}stk;</span><br><span class="line"></span><br><span class="line">stk s;        <span class="comment">//s为全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈操作</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">push</span><span class="params">(<span class="type">int</span> i,ElemType x)</span></span>{     <span class="comment">//i为栈号，i=0表示左边的s1栈，i=2表示右边的s2栈，x为入栈元素</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;<span class="number">1</span>){</span><br><span class="line">        cout&lt;&lt;<span class="string">"输入错误"</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);        <span class="comment">//exit(0)终止程序</span></span><br><span class="line">    }      </span><br><span class="line">    <span class="keyword">if</span>(s.top[<span class="number">1</span>]-s.top[<span class="number">0</span>]==<span class="number">1</span>){</span><br><span class="line">        cout&lt;&lt;<span class="string">"已满"</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">switch</span>(i){</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: s.stack[++s.top[<span class="number">0</span>]]=x; <span class="keyword">return</span> <span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: s.stack[--s.top[<span class="number">1</span>]]=x; <span class="keyword">return</span> <span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">ElemType <span class="title">pop</span><span class="params">(<span class="type">int</span> i)</span></span>{      <span class="comment">//i表示栈号</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;<span class="number">1</span>){</span><br><span class="line">        cout&lt;&lt;<span class="string">"栈号错误"</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">switch</span>(i){</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span>(s.top[<span class="number">0</span>]==<span class="number">-1</span>){</span><br><span class="line">                cout&lt;&lt;<span class="string">"栈空"</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">return</span> s.stack[s.top[<span class="number">0</span>]--];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span>(s.top[<span class="number">1</span>]==maxsize){</span><br><span class="line">                cout&lt;&lt;<span class="string">"栈空"</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">return</span> s.stack[s.top[<span class="number">1</span>]--];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">    }<span class="comment">//switch</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 共享栈 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx -007</title>
      <link href="/posts/521b9f65/"/>
      <url>/posts/521b9f65/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx"><a href="#设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx" class="headerlink" title="设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx"></a>设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h4 id="算法思想："><a href="#算法思想：" class="headerlink" title="算法思想："></a>算法思想：</h4><p>​使用栈来判断链表中的数据是否对称。先让前一半元素依次进栈。在处理链表的后一半元素时，当访问到链表的一个元素后，就从链表中弹出一个元素。按循环后数组下标来判断，是否对称</p><h4 id="代码编写注意点："><a href="#代码编写注意点：" class="headerlink" title="代码编写注意点："></a>代码编写注意点：</h4><p>​1、数组下标从0开始，前一半元素下标是从<strong>0 &lt;= i &lt; n/2</strong></p><p>​2、判断元素个数为<strong>奇数</strong> <strong>n%2==1</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设单链表的表头指针为L，结点由data，next构成，设计算法判断该链表的全部n个字符是否中心对称。如xyx、xyyx</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> {</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span>* next;</span><br><span class="line">}LNode, * LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参考答案</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dc</span><span class="params">(LinkList L,<span class="type">int</span> n)</span></span>{</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> s[n/<span class="number">2</span>];     <span class="comment">//s为字符栈</span></span><br><span class="line">    LNode *p=L-&gt;next;   <span class="comment">//p为工作指针，指向待处理的当前元素</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++){    <span class="comment">//链表前一半元素进栈，注意由于是数组，下标从零开始。所以i&lt;n/2</span></span><br><span class="line">        s[i]=p-&gt;data;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    i--;        <span class="comment">//恢复最后的i值</span></span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)       <span class="comment">//元素个数为奇数，移过中心点</span></span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;s[i]==p-&gt;data){</span><br><span class="line">        i--;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;     <span class="comment">//对称</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">//不对称</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自己写的代码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dc</span><span class="params">(LinkList L, <span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="type">char</span>* a = <span class="keyword">new</span> <span class="type">char</span>[n];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = n - <span class="number">1</span>;     <span class="comment">//i,j 作为数组两端的工作指针</span></span><br><span class="line">    LNode* p = L-&gt;next; <span class="comment">//作为遍历单链表的工作指针</span></span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;   <span class="comment">//字符转移</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) {</span><br><span class="line">        a[k] = p-&gt;data;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        k++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (j - i &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">if</span> (a[i] == a[j]) {</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            cout &lt;&lt; <span class="string">"错误"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">delete</span>[] a;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    LinkList L;</span><br><span class="line">    L = <span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line">    LNode* a, * b, * c;</span><br><span class="line">    a = <span class="keyword">new</span> LNode;</span><br><span class="line">    b = <span class="keyword">new</span> LNode;</span><br><span class="line">    c = <span class="keyword">new</span> LNode;</span><br><span class="line">    a-&gt;data = <span class="string">'x'</span>;</span><br><span class="line">    b-&gt;data = <span class="string">'y'</span>;</span><br><span class="line">    c-&gt;data = <span class="string">'y'</span>;</span><br><span class="line">    L-&gt;next=a;</span><br><span class="line">    a-&gt;next=b;</span><br><span class="line">    b-&gt;next=c;</span><br><span class="line">    c-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dc</span>(L, n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> L;</span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    <span class="keyword">delete</span> b;</span><br><span class="line">    <span class="keyword">delete</span> c;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 判断对称性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带头结点代码，单链表逆置，辅助空间为O(1) -005</title>
      <link href="/posts/b6fb7676/"/>
      <url>/posts/b6fb7676/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="带头结点代码，单链表逆置，辅助空间为O-1"><a href="#带头结点代码，单链表逆置，辅助空间为O-1" class="headerlink" title="带头结点代码，单链表逆置，辅助空间为O(1)"></a>带头结点代码，单链表逆置，辅助空间为O(1)</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将头结点和之后结点断开，头插法插入。断开后，无头结点的链表，需要p，r两个指针（p为工作指针，<strong>r=p-&gt;next防止断链</strong>）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>{</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">}LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">Reverse_l</span><span class="params">(LinkList &amp;L)</span></span>{</span><br><span class="line">    LNode *p,*r;   <span class="comment">//p为工作指针，r作为后继指针防止断链</span></span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>){</span><br><span class="line">        r=p-&gt;next;</span><br><span class="line">        p-&gt;next=L-&gt;next;</span><br><span class="line">        L-&gt;next=p;</span><br><span class="line">        p=r;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
            <tag> 逆序 </tag>
            
            <tag> 空间复杂度低 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带头结点的单链表L，删除一个最小结点的高效算法（假设最小结点是唯一的） -004</title>
      <link href="/posts/c9cd15b6/"/>
      <url>/posts/c9cd15b6/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="带头结点的单链表L，删除一个最小结点的高效算法（假设最小结点是唯一的）"><a href="#带头结点的单链表L，删除一个最小结点的高效算法（假设最小结点是唯一的）" class="headerlink" title="带头结点的单链表L，删除一个最小结点的高效算法（假设最小结点是唯一的）"></a>带头结点的单链表L，删除一个最小结点的高效算法（假设最小结点是唯一的）</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​遍历指针，使用两个first，second（使用两个<strong>分别定位</strong>p，pre）</p><p>​最小值删除指针，使用两个p，pre</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>{</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">}LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Del_min</span><span class="params">(LinkList &amp;L)</span></span>{</span><br><span class="line">    LNode *p=L-&gt;next,*pre=L;   <span class="comment">//p指向最小的结点.pre指向最小结点的前驱</span></span><br><span class="line">    LNode *first=p,*second=L;  <span class="comment">//first second 用于遍历单链表</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>){</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data&lt;first-&gt;data){</span><br><span class="line">            first=p;</span><br><span class="line">            second=pre;</span><br><span class="line">        }</span><br><span class="line">        second=first;</span><br><span class="line">        first=first-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    pre-&gt;next=p-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 按值删除 </tag>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
            <tag> 最小值 </tag>
            
            <tag> 高效算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点 -001</title>
      <link href="/posts/f8ef9f43/"/>
      <url>/posts/f8ef9f43/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点"><a href="#设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点" class="headerlink" title="设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点"></a>设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​由于L为引用，是直接对原链表进行操作，所以不会断链。</p><p>​参数引用是L-&gt;next,自我调用函数执行完后，虽然p所指结点被删除了，但是返回的依然是L-&gt;next。返回后，整个表是连续的。外层函数并不知道，内层调用时，L移动了位置。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>{</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">}LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Del_X_3</span><span class="params">(LinkList &amp;L,ElemType x)</span></span>{</span><br><span class="line">    LNode *p;    <span class="comment">//p指向待删除结点</span></span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;data==x){</span><br><span class="line">        p=L;</span><br><span class="line">        L=L-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="built_in">Del_X_3</span>(L,x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>          <span class="comment">//若L所指结点值不为x</span></span><br><span class="line">        <span class="built_in">Del_X_3</span>(L-&gt;next,x);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 不带头结点 </tag>
            
            <tag> 按值删除 </tag>
            
            <tag> 单链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带头结点的单链表L，删除所有值为x的结点，并释放空间，假设x唯一 -002</title>
      <link href="/posts/68c06b74/"/>
      <url>/posts/68c06b74/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="带头结点的单链表L，删除所有值为x的结点，并释放空间，假设x唯一"><a href="#带头结点的单链表L，删除所有值为x的结点，并释放空间，假设x唯一" class="headerlink" title="带头结点的单链表L，删除所有值为x的结点，并释放空间，假设x唯一"></a>带头结点的单链表L，删除所有值为x的结点，并释放空间，假设x唯一</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>删除结点时，使用first，second<strong>两个指针</strong>来遍历删除</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>{</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">}LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">Del_X</span><span class="params">(LinkList &amp;L,<span class="type">int</span> x)</span></span>{</span><br><span class="line">    LNode *first,*second;       <span class="comment">//first，second两个指针一前一后，遍历整个链表，并实现删除时连接</span></span><br><span class="line">    second=L;</span><br><span class="line">    first=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(first!=<span class="literal">NULL</span>){</span><br><span class="line">        <span class="keyword">if</span>(first-&gt;data==x){</span><br><span class="line">            second-&gt;next=first-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> first;</span><br><span class="line">            first=second-&gt;next;   </span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            first=first-&gt;next;</span><br><span class="line">            second=second-&gt;next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 按值删除 </tag>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值 -003</title>
      <link href="/posts/3e29fe4e/"/>
      <url>/posts/3e29fe4e/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值"><a href="#L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值" class="headerlink" title="L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值"></a>L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值</h1><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用了栈的思想，逆序输出。所以用到了递归，间接使用栈</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>{</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">}LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_print</span><span class="params">(LinkList &amp;L)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">R_print</span>(L-&gt;next);</span><br><span class="line">    <span class="keyword">if</span>(L!=<span class="literal">NULL</span>) cout&lt;&lt;L-&gt;data&lt;&lt;endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">R_Ignore_Head</span><span class="params">(LinkList L)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">R_print</span>(L-&gt;next);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 单链表 </tag>
            
            <tag> 带头结点 </tag>
            
            <tag> 逆序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新日志（2）</title>
      <link href="/posts/154f879f/"/>
      <url>/posts/154f879f/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="实现左侧栏滑动的同时，目录黏附顶端"><a href="#实现左侧栏滑动的同时，目录黏附顶端" class="headerlink" title="实现左侧栏滑动的同时，目录黏附顶端"></a>实现左侧栏滑动的同时，目录黏附顶端</h2><p>原来只支持侧边栏整体粘性定位，为了阅读体验，只针对目录开启粘性定位，增加 <code>column-left is-sticky</code> 类，并调整样式。</p><span id="more"></span><figure class="highlight js"><figcaption><span>source/js/main.js &gt;folded</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">if</span> ($toc.<span class="property">length</span> &gt; <span class="number">0</span>) {</span><br><span class="line">+        $toc.<span class="title function_">addClass</span>(<span class="string">'column-left is-sticky'</span>);</span><br><span class="line">         <span class="keyword">const</span> $mask = $(<span class="string">'&lt;div&gt;'</span>);     </span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>include/style/widget.styl &gt;folded</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+#toc</span><br><span class="line">+    max-<span class="attr">height</span>: <span class="title function_">calc</span>(100vh - 22px)</span><br><span class="line">+    overflow-<span class="attr">y</span>: scroll</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p>[1] <a href="https://www.alphalxy.com/2019/03/customize-icarus/">https://www.alphalxy.com/2019/03/customize-icarus/</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> icarus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> icarus </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新日志（1）</title>
      <link href="/posts/c4442e98/"/>
      <url>/posts/c4442e98/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>本文章以日志形式记录icarus主题的更新内容。</p><span id="more"></span><h1 id="2023-x2F-7-x2F-8"><a href="#2023-x2F-7-x2F-8" class="headerlink" title="2023/7/8"></a>2023/7/8</h1><h2 id="尝试实现页面放大功能（完成）"><a href="#尝试实现页面放大功能（完成）" class="headerlink" title="尝试实现页面放大功能（完成）"></a>尝试实现页面放大功能（完成）</h2><h3 id="页面放大"><a href="#页面放大" class="headerlink" title="页面放大"></a>页面放大</h3><h4 id="icarus-x2F-source-x2F-css-x2F-plus-styl-没有就新建一个文件"><a href="#icarus-x2F-source-x2F-css-x2F-plus-styl-没有就新建一个文件" class="headerlink" title="icarus/source/css/plus.styl  # 没有就新建一个文件"></a>icarus/source/css/plus.styl  # 没有就新建一个文件</h4><figure class="highlight css"><figcaption><span>icarus/source/css/plus.styl &gt;folded</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">screen-tablet = <span class="number">769px</span></span><br><span class="line">screen-desktop = <span class="number">1088px</span></span><br><span class="line">screen-widescreen = <span class="number">1280px</span></span><br><span class="line">screen-fullhd = <span class="number">1472px</span></span><br><span class="line">screen-onek = <span class="number">1700px</span></span><br><span class="line">primary-<span class="attribute">color</span> = <span class="selector-id">#fafafa</span></span><br><span class="line">primary-<span class="attribute">color</span>-hover = <span class="selector-id">#71a1e0</span></span><br><span class="line">primary-<span class="attribute">color</span>-active = <span class="selector-id">#4382d6</span></span><br><span class="line">primary-<span class="attribute">color</span>-light = rgba(<span class="number">93</span>, <span class="number">147</span>, <span class="number">219</span>, <span class="number">0.8</span>)</span><br><span class="line">link-<span class="attribute">color</span> = rgb(<span class="number">68</span>,<span class="number">155</span>,<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: screen-onek)</span><br><span class="line">    .container</span><br><span class="line">        <span class="attribute">max-width</span>: <span class="number">1600px</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1600px</span></span><br><span class="line">        .column.is-<span class="number">3</span>-widescreen</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">22%</span></span><br><span class="line">        .column.is-<span class="number">6</span>-widescreen</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">56%</span></span><br><span class="line"></span><br><span class="line">// Background image</span><br><span class="line">body</span><br><span class="line">    <span class="attribute">background-color</span>: transparent</span><br><span class="line"><span class="attribute">body</span>:before</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span></span><br><span class="line">    <span class="attribute">position</span>: fixed</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.01</span></span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">1s</span></span><br><span class="line">    <span class="attribute">background</span>: url(<span class="string">"https://api.btstu.cn/sjbz/?lx=dongman&amp;format=images&amp;method=pc"</span>) center <span class="number">0</span> no-repeat</span><br><span class="line">    <span class="attribute">background-size</span>: cover</span><br><span class="line">    @media screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: screen-tablet - <span class="number">1</span>)</span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="string">"https://api.btstu.cn/sjbz/?lx=dongman&amp;format=images&amp;method=mobile"</span>)</span><br><span class="line">body.<span class="attribute">ready</span>:before</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">// Nav bar fixes</span><br><span class="line">.navbar</span><br><span class="line">    <span class="attribute">background-color</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>)</span><br><span class="line">    <span class="attribute">backdrop-filter</span>: blur(<span class="number">10px</span>)</span><br><span class="line">    <span class="attribute">-webkit-backdrop-filter</span>: blur(<span class="number">10px</span>)</span><br><span class="line">.navbar-main</span><br><span class="line">    .navbar-menu</span><br><span class="line">        <span class="attribute">background-color</span>: transparent</span><br><span class="line">    .navbar-item</span><br><span class="line">        &amp;.is-active</span><br><span class="line">            <span class="attribute">color</span>: #<span class="number">3273</span>dc</span><br><span class="line">            <span class="attribute">font-weight</span>: bold</span><br><span class="line">        &amp;:<span class="attribute">hover</span></span><br><span class="line">            <span class="attribute">color</span>: #<span class="number">3273</span>dc</span><br><span class="line">            <span class="attribute">background-color</span>: primary-color</span><br><span class="line">    @media screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: screen-desktop)</span><br><span class="line">        .navbar-menu</span><br><span class="line">            .navbar-start</span><br><span class="line">                <span class="attribute">margin-left</span>: <span class="number">2em</span></span><br><span class="line">    @media screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: screen-tablet - <span class="number">1</span>)</span><br><span class="line">        .navbar-menu</span><br><span class="line">            <span class="attribute">flex-direction</span>: column</span><br><span class="line">            .navbar-start</span><br><span class="line">            .navbar-end</span><br><span class="line">                <span class="attribute">justify-content</span>: center</span><br><span class="line">                <span class="attribute">overflow-x</span>: auto</span><br><span class="line">                .navbar-item</span><br><span class="line">                    <span class="attribute">padding</span>: .<span class="number">5rem</span></span><br><span class="line">            .navbar-end</span><br><span class="line">                <span class="attribute">padding-bottom</span>: .<span class="number">5rem</span></span><br><span class="line"></span><br><span class="line">// Card fixes</span><br><span class="line">.card</span><br><span class="line">    <span class="attribute">overflow</span>: visible</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.5s</span> ease</span><br><span class="line">    <span class="attribute">background-color</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.95</span>)</span><br><span class="line">    &amp;:<span class="attribute">hover</span></span><br><span class="line">        <span class="attribute">background-color</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">1</span>)</span><br><span class="line">    &amp;.card-transparent</span><br><span class="line">        <span class="attribute">background-color</span>: transparent !important</span><br><span class="line">        .level-start,</span><br><span class="line">        .level-end</span><br><span class="line">            <span class="attribute">overflow</span>: hidden</span><br><span class="line">@media screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: screen-tablet)</span><br><span class="line">    .column-main,</span><br><span class="line">    .column-left,</span><br><span class="line">    .column-right,</span><br><span class="line">    .column-right-shadow</span><br><span class="line">        &amp;.is-sticky</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">10px</span></span><br><span class="line"></span><br><span class="line">// Article horizontal scroll bar</span><br><span class="line">.article</span><br><span class="line">    .content</span><br><span class="line">        <span class="attribute">overflow</span>: auto</span><br><span class="line"></span><br><span class="line">// Footer fixes</span><br><span class="line">footer.footer</span><br><span class="line">    <span class="attribute">background-color</span>: transparent</span><br><span class="line"></span><br><span class="line">.footer</span><br><span class="line">    <span class="attribute">backdrop-filter</span>: blur(<span class="number">10px</span>)</span><br><span class="line">    <span class="attribute">-webkit-backdrop-filter</span>: blur(<span class="number">10px</span>)</span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    &amp;:before</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">''</span></span><br><span class="line">        <span class="attribute">position</span>: absolute</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">        <span class="attribute">background-color</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line">.footer-logo</span><br><span class="line">    img</span><br><span class="line">        <span class="attribute">max-height</span>: <span class="number">2rem</span></span><br><span class="line">.footer <span class="attribute">a</span>:<span class="keyword">not</span>(.button)</span><br><span class="line">    <span class="attribute">color</span>: inherit</span><br><span class="line">    &amp;:<span class="attribute">hover</span></span><br><span class="line">        <span class="attribute">text-decoration</span>: underline</span><br><span class="line"></span><br><span class="line">// Section fixes</span><br><span class="line">.section .container .columns</span><br><span class="line">    <span class="attribute">-webkit-justify-content</span>: center</span><br><span class="line">    <span class="attribute">justify-content</span>: center</span><br><span class="line"></span><br><span class="line">// Selection</span><br><span class="line">::selection</span><br><span class="line">    <span class="attribute">color</span>: white</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color-light</span><br><span class="line">::-moz-selection</span><br><span class="line">    <span class="attribute">color</span>: white</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color-light</span><br><span class="line"></span><br><span class="line">// Colors</span><br><span class="line">a</span><br><span class="line">    <span class="attribute">color</span>: link-color</span><br><span class="line"></span><br><span class="line">.button.is-link</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color</span><br><span class="line"></span><br><span class="line">article.article</span><br><span class="line">    .article-meta</span><br><span class="line">        <span class="attribute">overflow-y</span>: hidden</span><br><span class="line">    .title</span><br><span class="line">        <span class="attribute">width</span>: fit-content</span><br><span class="line">    img</span><br><span class="line">        <span class="attribute">max-height</span>: <span class="number">800px</span></span><br><span class="line"></span><br><span class="line">article</span><br><span class="line">    .title a</span><br><span class="line">        <span class="attribute">background-image</span>: linear-gradient(transparent calc(<span class="number">100%</span> - <span class="number">1px</span>), primary-color <span class="number">1px</span>)</span><br><span class="line">        <span class="attribute">background-repeat</span>: no-repeat</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">0</span> <span class="number">100%</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">25s</span> ease-in-out</span><br><span class="line">    .<span class="attribute">title</span>:<span class="attribute">hover</span> a</span><br><span class="line">        // override another !important</span><br><span class="line">        <span class="attribute">color</span>: primary-color !important</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span></span><br><span class="line"></span><br><span class="line">.button.<span class="attribute">is-link</span>:<span class="attribute">hover</span>, .button.is-link.is-hovered</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color-hover</span><br><span class="line"></span><br><span class="line">.button.<span class="attribute">is-link</span>:active, .button.is-link.is-active</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color-active</span><br><span class="line"></span><br><span class="line">.pagination-link.is-current</span><br><span class="line">    <span class="attribute">background-color</span>: primary-color</span><br><span class="line">    <span class="attribute">border-color</span>: primary-color-active</span><br><span class="line"></span><br><span class="line">// Fix fontawsome icon 不等宽</span><br><span class="line">.navbar-main .navbar-menu .navbar-end .navbar-item</span><br><span class="line">    <span class="attribute">min-width</span> <span class="number">35px</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center</span><br><span class="line">    <span class="attribute">-webkit-justify-content</span>: center</span><br><span class="line"></span><br><span class="line">// 版权声明</span><br><span class="line">.article-licensing</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">#busuanzi_container_page_pv</span><br><span class="line">    <span class="attribute">display</span>: none !important</span><br><span class="line"></span><br><span class="line">.card .v .vlist .vcard .vcontent</span><br><span class="line">    <span class="attribute">text-align</span>: inherit</span><br><span class="line"></span><br><span class="line">.searchbox</span><br><span class="line">    .searchbox-pinyin</span><br><span class="line">        <span class="attribute">display</span>: flex</span><br><span class="line">        <span class="attribute">align-items</span>: center</span><br><span class="line">        <span class="attribute">user-select</span>: none</span><br><span class="line">        input</span><br><span class="line">            <span class="attribute">vertical-align</span>: middle</span><br><span class="line">        span</span><br><span class="line">            <span class="attribute">position</span>: relative</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">1px</span></span><br><span class="line"></span><br><span class="line">.button.link-more</span><br><span class="line">    margin-top <span class="number">0.75rem</span></span><br><span class="line"></span><br><span class="line">.post-navigation</span><br><span class="line">    .level-item</span><br><span class="line">        <span class="attribute">flex-shrink</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">.twikoo-new-content</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line">// animals</span><br><span class="line"><span class="selector-class">.symbolic-animals</span> </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3273dc</span></span><br></pre></td></tr></tbody></table></figure><h4 id="icarus-x2F-source-x2F-style-styl-在该文件最后添加"><a href="#icarus-x2F-source-x2F-style-styl-在该文件最后添加" class="headerlink" title="icarus/source/style.styl  #在该文件最后添加"></a>icarus/source/style.styl  #在该文件最后添加</h4><figure class="highlight css"><figcaption><span>icarus/source/style.styl &gt;folded</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"plus"</span></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="2023-x2F-7-x2F-9"><a href="#2023-x2F-7-x2F-9" class="headerlink" title="2023/7/9"></a>2023/7/9</h1><h2 id="尝试实现toc的侧边栏显示功能"><a href="#尝试实现toc的侧边栏显示功能" class="headerlink" title="尝试实现toc的侧边栏显示功能"></a>尝试实现toc的侧边栏显示功能</h2><h3 id="toc侧边栏显示功能"><a href="#toc侧边栏显示功能" class="headerlink" title="toc侧边栏显示功能"></a>toc侧边栏显示功能</h3><h4 id="在文章头部加入"><a href="#在文章头部加入" class="headerlink" title="在文章头部加入"></a>在文章头部加入</h4><p><code>toc: true</code></p><h2 id="尝试实现文章页面两栏放大"><a href="#尝试实现文章页面两栏放大" class="headerlink" title="尝试实现文章页面两栏放大"></a>尝试实现文章页面两栏放大</h2><h3 id="文章页面放大两栏"><a href="#文章页面放大两栏" class="headerlink" title="文章页面放大两栏"></a>文章页面放大两栏</h3><p>icarus中可能没有_config.post.yml，<strong>需要自己新建文件夹</strong>。icarus <strong>5.0.0版本</strong>后，配置文件通常放在<strong>主题文件外面</strong>需要注意。</p><h4 id="设置文章页面为双栏目"><a href="#设置文章页面为双栏目" class="headerlink" title="设置文章页面为双栏目"></a>设置文章页面为双栏目</h4><p>在Blog文件下，新建**_config.post.yml**。把需要的widget显示到一边，可以参考官方文档<a href="https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/">Icarus用户指南 - 主题配置 - Icarus (ppoffice.github.io)</a></p><h4 id="修改icarus主题下layout文档（Icarus-x2F-layout-x2F-layout-jsx）"><a href="#修改icarus主题下layout文档（Icarus-x2F-layout-x2F-layout-jsx）" class="headerlink" title="修改icarus主题下layout文档（Icarus/layout/layout.jsx）"></a>修改icarus主题下layout文档（Icarus/layout/layout.jsx）</h4><p><strong>注意：</strong></p><ol><li>减号(-)：删除这一行</li><li>加号(+)：添加这一行</li></ol><figure class="highlight js"><figcaption><span>Icarus/layout/layout.jsx &gt;folded</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">             &lt;<span class="title class_">Head</span> site={site} config={config} helper={helper} page={page} /&gt;</span><br><span class="line">-            &lt;body class={`is-${columnCount}-column`}&gt;</span><br><span class="line">+            &lt;body class={`is-3-column`}&gt;</span><br><span class="line">                 &lt;Navbar config={config} helper={helper} page={page} /&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><figcaption><span>Icarus/layout/layout.jsx &gt;folded</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                                 <span class="string">'is-12'</span>: columnCount === <span class="number">1</span>,</span><br><span class="line">-                                <span class="string">'is-8-tablet is-8-desktop is-8-widescreen'</span>: columnCount === <span class="number">2</span>,</span><br><span class="line">+                                <span class="string">'is-8-tablet is-8-desktop is-9-widescreen'</span>: columnCount === <span class="number">2</span>,</span><br><span class="line">                                 <span class="string">'is-8-tablet is-8-desktop is-6-widescreen'</span>: columnCount === <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><h4 id="修改widgets-jsx-layout-x2F-common-x2F-widgets-jsx"><a href="#修改widgets-jsx-layout-x2F-common-x2F-widgets-jsx" class="headerlink" title="修改widgets.jsx (layout/common/widgets.jsx)"></a>修改widgets.jsx (layout/common/widgets.jsx)</h4><figure class="highlight js"><figcaption><span>layout/common/widgets.jsx &gt;folded</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">getColumnSizeClass</span>(<span class="params">columnCount</span>) {</span><br><span class="line">     <span class="keyword">switch</span> (columnCount) {</span><br><span class="line">         <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">-            <span class="keyword">return</span> <span class="string">'is-4-tablet is-4-desktop is-4-widescreen'</span>;</span><br><span class="line">+            <span class="keyword">return</span> <span class="string">'is-4-tablet is-4-desktop is-3-widescreen'</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">             <span class="keyword">return</span> <span class="string">'is-4-tablet is-4-desktop is-3-widescreen'</span>;</span><br><span class="line">     }</span><br></pre></td></tr></tbody></table></figure><h4 id="优化不同屏幕下的宽度-include-x2F-style-x2F-responsive-styl"><a href="#优化不同屏幕下的宽度-include-x2F-style-x2F-responsive-styl" class="headerlink" title="优化不同屏幕下的宽度(include/style/responsive.styl)"></a>优化不同屏幕下的宽度(include/style/responsive.styl)</h4><figure class="highlight css"><figcaption><span>include/style/responsive.styl &gt;folded</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> +widescreen()</span><br><span class="line">+    <span class="selector-class">.is-3-column</span> <span class="selector-class">.container</span></span><br><span class="line">+        <span class="attribute">max-width</span>: $widescreen - $gap</span><br><span class="line">+        width: $widescreen - $gap</span><br><span class="line">+</span><br><span class="line">     .is-<span class="number">1</span>-column .container, .is-<span class="number">2</span>-column .container</span><br><span class="line">         max-width: $desktop - <span class="number">2</span> * $gap</span><br><span class="line">         width: $desktop - <span class="number">2</span> * $gap</span><br><span class="line"></span><br><span class="line"> +<span class="built_in">fullhd</span>()</span><br><span class="line">+    .is-<span class="number">3</span>-column .container</span><br><span class="line">+        max-width: $fullhd - <span class="number">2</span> * $gap</span><br><span class="line">+        width: $fullhd - <span class="number">2</span> * $gap</span><br><span class="line">+</span><br><span class="line">     .is-<span class="number">2</span>-column .container</span><br><span class="line">         max-width: $widescreen - <span class="number">2</span> * $gap</span><br><span class="line">         width: $widescreen - <span class="number">2</span> * $gap</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p>[1] <a href="https://www.alphalxy.com/2019/03/customize-icarus/">https://www.alphalxy.com/2019/03/customize-icarus/</a></p><p>[2] <a href="https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/">Icarus用户指南 - 主题配置 - Icarus (ppoffice.github.io)</a></p><p>//此后的博客主题完善过程，将以日期分为多个文章记录</p></body></html>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> icarus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> icarus </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
